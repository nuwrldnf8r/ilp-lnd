{"version":3,"file":"uuid.js","sourceRoot":"","sources":["uuid.ts"],"names":[],"mappings":";;AAEa,QAAA,QAAQ,GAAG,CAAC,MAAc,EAAE,EAAE;IACzC,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAEvD,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,mCAAmC,EAAE,gBAAgB,CAAC,CAAA;AACvF,CAAC,CAAA;AAEY,QAAA,SAAS,GAAG,CAAC,MAAc,EAAE,IAAY,EAAE,EAAE;IACxD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAA;IAC7D,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,IAAI,CAAC,CAAA;IAC/D,CAAC;IACD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;AAC1B,CAAC,CAAA","sourcesContent":["import { Reader, Writer } from 'oer-utils'\n\nexport const readUuid = (reader: Reader) => {\n  const unformattedUuid = reader.read(16).toString('hex')\n\n  return unformattedUuid.replace(/^(.{8})(.{4})(.{4})(.{4})(.{12})$/, '$1-$2-$3-$4-$5')\n}\n\nexport const writeUuid = (writer: Writer, uuid: string) => {\n  const uuidBuffer = Buffer.from(uuid.replace(/-/g, ''), 'hex')\n  if (uuidBuffer.length !== 16) {\n    throw new Error('tried to write invalid UUID. value=' + uuid)\n  }\n  writer.write(uuidBuffer)\n}\n"]}