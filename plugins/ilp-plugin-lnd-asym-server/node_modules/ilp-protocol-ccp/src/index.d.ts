/// <reference types="node" />
export declare const CCP_CONTROL_DESTINATION = "peer.route.control";
export declare const CCP_UPDATE_DESTINATION = "peer.route.update";
export declare const PEER_PROTOCOL_FULFILLMENT: Buffer;
export declare const PEER_PROTOCOL_CONDITION: Buffer;
export declare enum Mode {
    MODE_IDLE = 0,
    MODE_SYNC = 1,
}
export declare const ModeReverseMap: string[];
export interface CcpRouteControlRequest {
    mode: Mode.MODE_IDLE | Mode.MODE_SYNC;
    lastKnownRoutingTableId: string;
    lastKnownEpoch: number;
    features: string[];
}
export interface CcpRouteControlResponse {
}
export declare enum PropId {
}
export interface CcpRoutePropCommon {
    isOptional: boolean;
    isTransitive: boolean;
    isPartial: boolean;
}
export interface CcpRoutePropBuffer extends CcpRoutePropCommon {
    isUtf8: false;
    id: number;
    value: Buffer;
}
export interface CcpRoutePropString extends CcpRoutePropCommon {
    isUtf8: true;
    id: number;
    value: string;
}
export declare type CcpRouteProp = CcpRoutePropBuffer | CcpRoutePropString;
export interface CcpRoute {
    prefix: string;
    path: string[];
    auth: Buffer;
    props: CcpRouteProp[];
}
export interface CcpRouteUpdateRequest {
    routingTableId: string;
    currentEpochIndex: number;
    fromEpochIndex: number;
    toEpochIndex: number;
    holdDownTime: number;
    speaker: string;
    newRoutes: CcpRoute[];
    withdrawnRoutes: string[];
}
export interface CcpRouteUpdateResponse {
}
declare const deserializeCcpRouteControlRequest: (request: Buffer) => CcpRouteControlRequest;
declare const serializeCcpRouteControlRequest: (request: CcpRouteControlRequest) => Buffer;
declare const deserializeCcpRouteUpdateRequest: (request: Buffer) => CcpRouteUpdateRequest;
declare const serializeCcpRouteUpdateRequest: (request: CcpRouteUpdateRequest) => Buffer;
declare const deserializeCcpResponse: (response: Buffer) => void;
declare const serializeCcpResponse: () => Buffer;
export { deserializeCcpRouteControlRequest, serializeCcpRouteControlRequest, deserializeCcpRouteUpdateRequest, serializeCcpRouteUpdateRequest, deserializeCcpResponse, serializeCcpResponse };
