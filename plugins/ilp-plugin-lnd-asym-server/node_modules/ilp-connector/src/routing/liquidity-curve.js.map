{"version":3,"file":"liquidity-curve.js","sourceRoot":"","sources":["liquidity-curve.ts"],"names":[],"mappings":"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","sourcesContent":["import Long = require('long')\nimport BigNumber from 'bignumber.js'\n\n// Fix missing type declaration in bignumber.js\ndeclare module 'bignumber.js' {\n  export interface BigNumber {\n    isBigNumber: true\n  }\n}\n\nBigNumber.config({ DECIMAL_PLACES: 19 })\n\nexport type Point = [BigNumber, BigNumber]\nexport type LooselyTypedNumber = BigNumber | string | number\nexport type LooselyTypedPoint = [LooselyTypedNumber, LooselyTypedNumber]\n\nexport class InvalidLiquidityCurveError extends Error {\n  constructor (message: string, points?: any) {\n    if (points) {\n      message = message + ' points:' + JSON.stringify(points)\n    }\n    super(message)\n    this.name = 'InvalidLiquidityCurveError'\n  }\n}\n\n// TODO use integer math\nexport default class LiquidityCurve {\n  protected data!: Buffer\n  protected points!: Point[]\n\n  constructor (data: string | LooselyTypedPoint[] | Buffer) {\n    if (typeof data === 'string') {\n      this.setData(Buffer.from(data, 'base64'))\n    } else if (data instanceof Array) { // Points\n      this.setData(serializePoints(data))\n    } else { // Buffer\n      this.setData(data)\n    }\n  }\n\n  setData (data: Buffer) {\n    if (data.length % 16 !== 0) {\n      throw new InvalidLiquidityCurveError('Invalid LiquidityCurve buffer')\n    }\n    this.data = data\n    this.points = deserializePoints(data)\n    let prev\n    for (let i = 0; i < this.points.length; i++) {\n      let point = this.points[i]\n      if (prev && point[0].isLessThanOrEqualTo(prev[0])) {\n        throw new InvalidLiquidityCurveError('Curve x-coordinates must strictly increase in series', this.getPoints())\n      }\n      if (prev && point[1].isLessThan(prev[1])) {\n        throw new InvalidLiquidityCurveError('Curve y-coordinates must increase in series', this.getPoints())\n      }\n      prev = point\n    }\n  }\n\n  amountAt (xVal: LooselyTypedNumber) {\n    const x = bnFromValue(xVal)\n    const firstPoint = this.points[0]\n    const lastPoint = this.points[this.points.length - 1]\n    if (x.lt(firstPoint[0])) return new BigNumber(0)\n    if (x.eq(firstPoint[0])) return firstPoint[1]\n    if (lastPoint[0].lte(x)) return lastPoint[1]\n\n    let i; for (i = 0; this.points[i][0].lt(x); i++) ;\n\n    const pointA = this.points[i - 1]\n    const pointB = this.points[i]\n    const dy = pointB[1].minus(pointA[1])\n    const dx = pointB[0].minus(pointA[0])\n    return dy.multipliedBy(x.minus(pointA[0])).div(dx)\n      .plus(pointA[1])\n      .integerValue(BigNumber.ROUND_FLOOR)\n  }\n\n  amountReverse (yVal: LooselyTypedNumber) {\n    const y = bnFromValue(yVal)\n    if (this.points[0][1].gte(y)) {\n      return this.points[0][0]\n    }\n    if (this.points[this.points.length - 1][1].lt(y)) {\n      return new BigNumber(Infinity)\n    }\n\n    let i; for (i = 0; this.points[i][1].lt(y); i++) ;\n\n    const pointA = this.points[i - 1]\n    const pointB = this.points[i]\n    const dx = pointB[0].minus(pointA[0])\n    const dy = pointB[1].minus(pointA[1])\n    return dx.multipliedBy(y.minus(pointA[1])).div(dy)\n      .plus(pointA[0])\n      .integerValue(BigNumber.ROUND_FLOOR)\n  }\n\n  /**\n   * Combine two parallel routes, generating a new curve consisting of the best\n   * segments of each.\n   *\n   * @param {LiquidityCurve} curve\n   * @returns {LiquidityCurve}\n   */\n  combine (curve: LiquidityCurve) {\n    const combined = this._mapToMax(curve.points)\n      .concat(curve._mapToMax(this.points))\n      .concat(this._crossovers(curve))\n      .sort(comparePoints)\n      .map(roundCoords)\n      .filter(omitDuplicates)\n\n    // The following check is technically redundant, since LiquidityCurve#setPoints\n    // will do the same, and more checks.\n    // It's just included here for extra debug output, and can be removed later.\n\n    let prevY = new BigNumber(0)\n    for (let i = 0; i < combined.length; i++) {\n      const nextY = new BigNumber(combined[i][1])\n      if (nextY.lt(prevY)) {\n        throw new InvalidLiquidityCurveError(`position ${i}: ${nextY} < ${prevY}`, {\n          curve1: this.points,\n          curve2: curve.points,\n          combined\n        })\n      }\n      prevY = combined[i][1]\n    }\n    return new LiquidityCurve(combined)\n  }\n\n  /**\n   * A._mapToMax(B) to find [AB, A]\n   * B._mapToMax(A) to find [AB, B]\n   *\n   * │              B\n   * │    A a a a a a\n   * │   a    b\n   * │  a  b\n   * │ AB\n   * └────────────────\n   */\n  _mapToMax (points: Point[]) {\n    if (this.points.length === 0) return points\n    return points.map((point): Point => [\n      point[0],\n      max(point[1], this.amountAt(point[0]))\n    ])\n  }\n\n  /**\n   * A._crossovers(B) to find [AB, ●]\n   *\n   * │              B\n   * │    A a a a●a a\n   * │   a    b\n   * │  a  b\n   * │ AB\n   * └────────────────\n   */\n  _crossovers (curve: LiquidityCurve) {\n    if (this.points.length === 0 || curve.points.length === 0) return []\n    let pointsA = this.points\n    let pointsB = curve.points\n    const endA = pointsA[pointsA.length - 1]\n    const endB = pointsB[pointsB.length - 1]\n    if (endA[0].lt(endB[0])) pointsA = pointsA.concat([ [endB[0], endA[1]] ])\n    if (endB[0].lt(endA[0])) pointsB = pointsB.concat([ [endA[0], endB[1]] ])\n\n    const result: Point[] = []\n    this._eachOverlappingSegment(pointsA, pointsB, (pA1, pA2, pB1, pB2) => {\n      const solution = intersectLineSegments(pA1, pA2, pB1, pB2)\n      if (solution) result.push(solution)\n    })\n    return result\n  }\n\n  /**\n   * @param {Point[]} pointsA\n   * @param {Point[]} pointsB\n   * @param {function(lineA, lineB)} each\n   */\n  _eachOverlappingSegment (pointsA: Point[], pointsB: Point[], each: (p1: Point, p2: Point, p3: Point, p4: Point) => void) {\n    let cursor = 1\n    for (let indexA = 1; indexA < pointsA.length; indexA++) {\n      const p1 = pointsA[indexA - 1]\n      const p2 = pointsA[indexA]\n      for (let indexB = cursor; indexB < pointsB.length; indexB++) {\n        const p3 = pointsB[indexB - 1]\n        const p4 = pointsB[indexB]\n        if (p4[0].lt(p1[0])) { cursor++; continue }\n        if (p2[0].lt(p3[0])) break\n        each(p1, p2, p3, p4)\n      }\n    }\n  }\n\n  /**\n   * Compose two routes end-to-end: A→B.join(B→C) becomes A→C.\n   * @param {LiquidityCurve} curve\n   * @returns {LiquidityCurve}\n   */\n  join (curve: LiquidityCurve) {\n    const leftPoints: Point[] = []\n    const minX = curve.points[0][0]\n    const maxX = curve.points[curve.points.length - 1][0]\n    this.points.forEach((p) => {\n      // If `p.y` is not within `curve`'s domain, don't use it to form the new curve.\n      if (minX.lte(p[1]) && p[1].lte(maxX)) {\n        leftPoints.push([ p[0], curve.amountAt(p[1]) ])\n      }\n    })\n\n    return new LiquidityCurve(\n      leftPoints\n        .concat(curve.points\n          .map((p): Point => [ this.amountReverse(p[0]), p[1] ])\n        )\n        .sort(comparePoints)\n        .filter(omitInfinity)\n        .filter(omitDuplicates)\n    )\n  }\n\n  shiftX (_dx: number) {\n    const dx = new BigNumber(_dx)\n    let shiftedPoints = this.points.map((p): Point => [ p[0].plus(dx), p[1] ])\n    if (dx.gte(0)) return new LiquidityCurve(shiftedPoints)\n\n    for (let i = shiftedPoints.length - 1; i >= 0; i--) {\n      if (Number(shiftedPoints[i][0]) < 0) {\n        shiftedPoints = shiftedPoints.slice(i + 1)\n        shiftedPoints.unshift([new BigNumber(0), this.amountAt(dx.negated())])\n        break\n      }\n    }\n    return new LiquidityCurve(shiftedPoints)\n  }\n\n  shiftY (_dy: number) {\n    const dy = new BigNumber(_dy)\n    let shiftedPoints = this.points.map((p): Point => [ p[0], p[1].plus(dy) ])\n    if (dy.gte(0)) return new LiquidityCurve(shiftedPoints)\n\n    for (let i = shiftedPoints.length - 1; i >= 0; i--) {\n      if (shiftedPoints[i][1].isNegative()) {\n        shiftedPoints = shiftedPoints.slice(i + 1)\n        shiftedPoints.unshift([this.amountReverse(dy.negated()), new BigNumber(0)])\n        break\n      }\n    }\n    return new LiquidityCurve(shiftedPoints)\n  }\n\n  /**\n   * This converts the points to a list of pairs of numbers.\n   * It can lose precision, so it should only be used for testing/debugging.\n   */\n  getPoints () {\n    return this.points.map((point) => [\n      point[0].toNumber(),\n      point[1].toNumber()\n    ])\n  }\n\n  toBuffer () { return this.data }\n}\n\nfunction omitInfinity (point: Point) { return point[0].toString() !== 'Infinity' }\nfunction comparePoints (a: Point, b: Point) { return a[0].comparedTo(b[0]) }\n// Round to ensure the connector doesn't lose money.\nfunction roundCoords (point: Point): Point {\n  return [\n    point[0].integerValue(BigNumber.ROUND_CEIL),\n    point[1].integerValue(BigNumber.ROUND_FLOOR)\n  ]\n}\n\nfunction omitDuplicates (point: Point, i: number, points: Point[]) {\n  return i === 0 || !point[0].eq(points[i - 1][0])\n}\n\n/**\n * Intersect two line segments using determinants. This is more precise than\n * intersecting the lines using slopes and y-intercepts -- fewer fractions.\n *\n * See: http://mathworld.wolfram.com/Line-LineIntersection.html\n */\nfunction intersectLineSegments (p1: Point, p2: Point, p3: Point, p4: Point): Point | undefined {\n  const denominator = determinant(\n    p1[0].minus(p2[0]), p1[1].minus(p2[1]),\n    p3[0].minus(p4[0]), p3[1].minus(p4[1]))\n  const topLeft = determinant(\n    p1[0], p1[1],\n    p2[0], p2[1])\n  const bottomLeft = determinant(\n    p3[0], p3[1],\n    p4[0], p4[1])\n\n  // Parallel lines.\n  if (denominator.isZero()) return undefined\n  const x = determinant(\n    topLeft, p1[0].minus(p2[0]),\n    bottomLeft, p3[0].minus(p4[0])\n  ).div(denominator)\n  // Ensure that the intersection is within the line segments, not just the lines.\n  if (x.lt(p1[0]) || p2[0].lt(x)) return undefined\n  if (x.lt(p3[0]) || p4[0].lt(x)) return undefined\n  const y = determinant(\n    topLeft, p1[1].minus(p2[1]),\n    bottomLeft, p3[1].minus(p4[1])\n  ).div(denominator)\n  if (y.lt(p1[1]) || p2[1].lt(y)) return undefined\n  if (y.lt(p3[1]) || p4[1].lt(y)) return undefined\n  return [x, y]\n}\n\n/**\n * │a  b│\n * │c  d│ = ad - bc\n */\nfunction determinant (a: BigNumber, b: BigNumber, c: BigNumber, d: BigNumber) {\n  return a.multipliedBy(d).minus(b.multipliedBy(c))\n}\n\nfunction max (long1: BigNumber, long2: BigNumber) {\n  return long1.gt(long2) ? long1 : long2\n}\n\nfunction bnFromValue (rawValue: string | number | BigNumber) {\n  let value = rawValue\n  if (typeof value === 'number') {\n    if (value < 0) {\n      throw new InvalidLiquidityCurveError('Cannot parse negative value: ' + value)\n    }\n    value = Math.floor(value)\n  } else if (typeof value === 'string') {\n    if (value[0] === '-') {\n      throw new InvalidLiquidityCurveError('Cannot parse negative value: ' + value)\n    }\n  } else if (typeof value === 'object') {\n    if (value.isBigNumber && value.isNegative()) {\n      throw new InvalidLiquidityCurveError('Cannot parse negative value: ' + value.toString())\n    }\n  } else {\n    throw new InvalidLiquidityCurveError('Unknown type of value: ' + typeof value)\n  }\n  return new BigNumber(value)\n}\n\nfunction serializePoints (points: LooselyTypedPoint[]) {\n  const buffer = Buffer.alloc(points.length * 16)\n  let i = 0\n  for (const point of points) {\n    const x = Long.fromString(bnFromValue(point[0]).toFixed(0), true)\n    const y = Long.fromString(bnFromValue(point[1]).toFixed(0), true)\n    buffer.writeUInt32LE(x.getHighBitsUnsigned(), i)\n    buffer.writeUInt32LE(x.getLowBitsUnsigned(), i + 4)\n    buffer.writeUInt32LE(y.getHighBitsUnsigned(), i + 8)\n    buffer.writeUInt32LE(y.getLowBitsUnsigned(), i + 12)\n    i += 16\n  }\n  return buffer\n}\n\nfunction deserializePoints (buffer: Buffer) {\n  let array\n  if (buffer.byteOffset % 4 === 0) {\n    // fast method - only possible when byteOffset is a multiple of 4\n    array = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.length / 4)\n  } else {\n    // slow method - fallback\n    array = new Uint32Array(buffer.length / 4)\n    const arrBuffer = Buffer.from(array.buffer)\n    buffer.copy(arrBuffer)\n  }\n  const points: Point[] = []\n  for (let i = 0; i < array.length; i += 4) {\n    const xHi = array[i]\n    const xLo = array[i + 1]\n    const yHi = array[i + 2]\n    const yLo = array[i + 3]\n    points.push([\n      new BigNumber(new Long(xLo, xHi, true).toString()),\n      new BigNumber(new Long(yLo, yHi, true).toString())\n    ])\n  }\n  return points\n}\n"]}