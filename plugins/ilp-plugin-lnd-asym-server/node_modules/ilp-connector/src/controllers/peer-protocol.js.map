{"version":3,"file":"peer-protocol.js","sourceRoot":"","sources":["peer-protocol.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AACvC,6CAA8C;AAC9C,+BAAiC;AAEjC,MAAM,EAAE,kBAAkB,EAAE,GAAG,SAAS,CAAC,MAAM,CAAA;AAE/C,MAAM,uBAAuB,GAAG,MAAM,CAAC,IAAI,CAAC,8CAA8C,EAAE,QAAQ,CAAC,CAAA;AAErG;IAIE,YAAa,IAAqB;QAChC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,oBAAmB,CAAC,CAAA;QACpD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,CAAA;IAC1C,CAAC;IAED,KAAK,CAAC,MAAM,CACV,IAAY,EACZ,aAAqB,EACrB,EAAE,YAAY,EAA0C;QAExD,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,IAAI,kBAAkB,CAAC,4CAA4C,CAAC,CAAA;QAC5E,CAAC;QAED,EAAE,CAAC,CAAC,YAAY,CAAC,WAAW,KAAK,aAAa,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAA;QAC7D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,YAAY,EAAE,CAAC,CAAA;QACzE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,kBAAkB,CAAC,wBAAwB,CAAC,CAAA;QACxD,CAAC;IACH,CAAC;CACF;AA1BD,yCA0BC","sourcesContent":["import * as IlpPacket from 'ilp-packet'\nimport IldcpHostController from './ildcp-host'\nimport CcpController from './ccp'\nimport reduct = require('reduct')\nconst { InvalidPacketError } = IlpPacket.Errors\n\nconst PEER_PROTOCOL_CONDITION = Buffer.from('Zmh6rfhivXdsj8GLjp+OIAiXFIVu4jOzkCpZHQ1fKSU=', 'base64')\n\nexport default class PeerProtocolController {\n  private ildcpHostController: IldcpHostController\n  private ccpController: CcpController\n\n  constructor (deps: reduct.Injector) {\n    this.ildcpHostController = deps(IldcpHostController)\n    this.ccpController = deps(CcpController)\n  }\n\n  async handle (\n    data: Buffer,\n    sourceAccount: string,\n    { parsedPacket }: { parsedPacket: IlpPacket.IlpPrepare }\n  ) {\n    if (!PEER_PROTOCOL_CONDITION.equals(parsedPacket.executionCondition)) {\n      throw new InvalidPacketError('condition must be peer protocol condition.')\n    }\n\n    if (parsedPacket.destination === 'peer.config') {\n      return this.ildcpHostController.handle(data, sourceAccount)\n    } else if (parsedPacket.destination.startsWith('peer.route')) {\n      return this.ccpController.handle(data, sourceAccount, { parsedPacket })\n    } else {\n      throw new InvalidPacketError('unknown peer protocol.')\n    }\n  }\n}\n"]}