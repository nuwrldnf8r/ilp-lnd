{"version":3,"file":"invalid-json-body-error.js","sourceRoot":"","sources":["invalid-json-body-error.ts"],"names":[],"mappings":";;AAAA,8CAA8C;AAG9C,2CAAmC;AAEnC,0BAA0C,SAAQ,SAAS;IAKzD,YAAa,OAAe,EAAE,gBAA+B;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAA;QAJT,kBAAa,GAAW,GAAG,CAAA;QAMhC,IAAI,CAAC,YAAY,GAAG,mBAAM,CAAC,KAAK,CAAC,kBAAkB,CAAA;QACnD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;IAC1C,CAAC;IAED,UAAU,CAAE,GAA8B,EAAE,eAA6B;QACvE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;gBAC1B,CAAC;YACH,CAAC;YACD,MAAM,CAAA;QACR,CAAC;QAED,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAExH,GAAG,CAAC,MAAM,eAAe,CAAC,QAAQ,KAAK,eAAe,CAAC,OAAO,KAAK,cAAc,EAAE,CAAC,CAAA;IACtF,CAAC;CACF;AA1BD,uCA0BC","sourcesContent":["import BaseError = require('extensible-error')\nimport { ErrorObject } from 'ajv'\n\nimport { Errors } from 'ilp-packet'\n\nexport default class InvalidJsonBodyError extends BaseError {\n  public ilpErrorCode: string\n  public httpErrorCode: number = 400\n  protected validationErrors: ErrorObject[]\n\n  constructor (message: string, validationErrors: ErrorObject[]) {\n    super(message)\n\n    this.ilpErrorCode = Errors.codes.F01_INVALID_PACKET\n    this.validationErrors = validationErrors\n  }\n\n  debugPrint (log: (message: string) => void, validationError?: ErrorObject) {\n    if (!validationError) {\n      if (this.validationErrors) {\n        for (let ve of this.validationErrors) {\n          this.debugPrint(log, ve)\n        }\n      }\n      return\n    }\n\n    const additionalInfo = Object.keys(validationError.params).map(key => `${key}=${validationError.params[key]}`).join(' ')\n\n    log(`-- ${validationError.dataPath}: ${validationError.message}. ${additionalInfo}`)\n  }\n}\n"]}