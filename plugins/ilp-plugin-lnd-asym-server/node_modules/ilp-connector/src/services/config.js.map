{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"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","sourcesContent":["import InvalidJsonBodyError from '../errors/invalid-json-body-error'\nimport { constantCase } from 'change-case'\nimport { create as createLogger } from '../common/log'\nimport { Config as ConfigSchemaTyping } from '../schemas/Config'\nconst log = createLogger('config')\nconst schema = require('../schemas/Config.json')\nconst {\n  extractDefaultsFromSchema\n} = require('../lib/utils')\nimport Ajv = require('ajv')\n\nconst ajv = new Ajv()\n\nconst ENV_PREFIX = 'CONNECTOR_'\n\nconst BOOLEAN_VALUES = {\n  '1': true,\n  'true': true,\n  '0': false,\n  'false': false,\n  '': false\n}\n\nexport default class Config extends ConfigSchemaTyping {\n  // TODO: These fields are already all defined in the config schema, however\n  //   they are defined as optional and as a result, TypeScript thinks that they\n  //   may not be set. However, when we construct a new Config instance, we load\n  //   the defaults from the schema, so these *will* always be set. These\n  //   declarations make TypeScript happy.\n  public broadcastCurves!: boolean\n  public store!: string\n  public quoteExpiry!: number\n  public routeExpiry!: number\n  public minMessageWindow!: number\n  public maxHoldTime!: number\n  public routeBroadcastInterval!: number\n\n  protected _validate: Ajv.ValidateFunction\n  protected _validateAccount: Ajv.ValidateFunction\n\n  constructor () {\n    super()\n\n    this.loadDefaults()\n\n    this._validate = ajv.compile(schema)\n    this._validateAccount = ajv.compile(schema.properties.accounts.additionalProperties)\n  }\n\n  loadDefaults () {\n    Object.assign(this, extractDefaultsFromSchema(schema))\n  }\n\n  loadFromEnv (env?: NodeJS.ProcessEnv) {\n    if (!env) {\n      env = process.env\n    }\n\n    // Copy all env vars starting with ENV_PREFIX into a set so we can check off\n    // the ones we recognize and warn the user about any we don't recognize.\n    const unrecognizedEnvKeys = new Set(\n      Object.keys(env).filter(key => key.startsWith(ENV_PREFIX))\n    )\n\n    const config = {}\n    for (let key of Object.keys(schema.properties)) {\n      const envKey = ENV_PREFIX + constantCase(key)\n      const envValue = env[envKey]\n\n      unrecognizedEnvKeys.delete(envKey)\n\n      if (typeof envValue === 'string') {\n        switch (schema.properties[key].type) {\n          case 'string':\n            config[key] = envValue\n            break\n          case 'object':\n          case 'array':\n            try {\n              config[key] = JSON.parse(envValue)\n            } catch (err) {\n              log.warn('unable to parse config. key=%s', envKey)\n            }\n            break\n          case 'boolean':\n            config[key] = BOOLEAN_VALUES[envValue] || false\n            break\n          case 'integer':\n          case 'number':\n            config[key] = Number(envValue)\n            break\n          default:\n            throw new TypeError('Unknown JSON schema type: ' + schema.properties[key].type)\n        }\n      }\n    }\n\n    for (const key of unrecognizedEnvKeys) {\n      log.warn('unrecognized environment variable. key=%s', key)\n    }\n\n    this.validate(config)\n\n    Object.assign(this, config)\n  }\n\n  loadFromOpts (opts: object) {\n    this.validate(opts)\n\n    Object.assign(this, opts)\n  }\n\n  validate (config: object) {\n    if (!this._validate(config)) {\n      const firstError = this._validate.errors && this._validate.errors[0]\n        ? this._validate.errors[0]\n        : { message: 'unknown validation error', dataPath: '' }\n      throw new InvalidJsonBodyError('config failed to validate. error=' + firstError.message + ' dataPath=' + firstError.dataPath, this._validate.errors || [])\n    }\n  }\n\n  validateAccount (id: string, accountInfo: any) {\n    if (!this._validateAccount(accountInfo)) {\n      throw new InvalidJsonBodyError('account config failed to validate. id=' + id, this._validateAccount.errors || [])\n    }\n  }\n\n  get (key: string) {\n    return this[key]\n  }\n}\n"]}