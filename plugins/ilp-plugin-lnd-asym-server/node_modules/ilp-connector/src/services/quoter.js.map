{"version":3,"file":"quoter.js","sourceRoot":"","sources":["quoter.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AACvC,yCAAiC;AACjC,qCAA6B;AAC7B,gEAAuD;AACvD,sDAA6C;AAC7C,uCAAsD;AACtD,MAAM,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAA;AAElC,MAAM,EAAE,aAAa,EAAE,GAAG,SAAS,CAAC,MAAM,CAAA;AAE1C,MAAM,yBAAyB,GAAG,IAAI,CAAA;AAStC;IAUE,YAAa,IAAqB;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAQ,CAAC,CAAA;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,gBAAM,CAAC,CAAC,WAAW,CAAA;QACnD,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAS,EAAE,CAAA;IAC9B,CAAC;IAUD,KAAK,CAAC,cAAc,CAAE,OAAe,EAAE,kBAA0B;QAC/D,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;QAE1D,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACpC,GAAG,CAAC,KAAK,CAAC,uDAAuD,EAAE,WAAW,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC,CAAA;gBAClI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;YACvC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,GAAG,CAAC,KAAK,CAAC,mCAAmC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAA;gBAClE,MAAM,CAAC,WAAW,CAAA;YACpB,CAAC;QACH,CAAC;QAED,MAAM,kBAAkB,GAAG,SAAS,CAAC,6BAA6B,CAAC;YACjE,kBAAkB,EAAE,kBAAkB;YACtC,uBAAuB,EAAE,yBAAyB;SACnD,CAAC,CAAA;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QAC/C,GAAG,CAAC,KAAK,CAAC,4CAA4C,EAAE,OAAO,CAAC,CAAA;QAChE,MAAM,mBAAmB,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAA;QAErE,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC;YAC3E,MAAM,IAAI,GAAG,SAAS,CAAC,gCAAgC,CAAC,mBAAmB,CAAC,CAAA;YAC5E,MAAM,CAAC;gBACL,KAAK,EAAE,IAAI,yBAAc,CAAC,IAAI,CAAC,cAAc,CAAC;gBAC9C,MAAM,EAAE,IAAI,CAAC,eAAe;gBAC5B,MAAM,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gBAChC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,GAAG,yBAAyB;aACtE,CAAA;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,aAAa,CAAC,qBAAqB,CAAC,CAAA;QAChD,CAAC;IACH,CAAC;IAED,UAAU,CAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,gBAAgB,EAAe;QAClE,GAAG,CAAC,KAAK,CAAC,wDAAwD,EAAE,MAAM,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAA;QACrG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE;YACxB,MAAM;YACN,KAAK;YACL,MAAM;YACN,gBAAgB;SACjB,CAAC,CAAA;IACJ,CAAC;CACF;AAnED,yBAmEC","sourcesContent":["import * as IlpPacket from 'ilp-packet'\nimport Accounts from './accounts'\nimport Config from './config'\nimport LiquidityCurve from '../routing/liquidity-curve'\nimport PrefixMap from '../routing/prefix-map'\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('quoter')\nimport reduct = require('reduct')\nconst { InternalError } = IlpPacket.Errors\n\nconst DESTINATION_HOLD_DURATION = 5000\n\nexport interface CachedCurve {\n  prefix: string\n  curve: LiquidityCurve\n  expiry: number\n  minMessageWindow: number\n}\n\nexport default class Quoter {\n  protected accounts: Accounts\n  protected quoteExpiryDuration: number\n  protected cache: PrefixMap<CachedCurve>\n\n  /**\n   * @param {Accounts} accounts\n   * @param {Object} config\n   * @param {Integer} config.quoteExpiry\n   */\n  constructor (deps: reduct.Injector) {\n    this.accounts = deps(Accounts)\n    this.quoteExpiryDuration = deps(Config).quoteExpiry // milliseconds\n    this.cache = new PrefixMap()\n  }\n\n  /**\n   * If that matching route has a local curve, it will be returned.\n   * Otherwise, make a remote curve quote request.\n   *\n   * @param {IlpAddress} nextHop\n   * @param {IlpAddress} destinationAccount\n   * @returns {Object}\n   */\n  async quoteLiquidity (nextHop: string, destinationAccount: string) {\n    const cachedCurve = this.cache.resolve(destinationAccount)\n\n    if (cachedCurve) {\n      if (cachedCurve.expiry < Date.now()) {\n        log.debug('cleaning up expired cached curve. prefix=%s expiry=%s', cachedCurve.prefix, new Date(cachedCurve.expiry).toISOString())\n        this.cache.delete(cachedCurve.prefix)\n      } else {\n        log.debug('returning cached curve. prefix=%s', cachedCurve.prefix)\n        return cachedCurve\n      }\n    }\n\n    const quoteRequestPacket = IlpPacket.serializeIlqpLiquidityRequest({\n      destinationAccount: destinationAccount,\n      destinationHoldDuration: DESTINATION_HOLD_DURATION\n    })\n    const plugin = this.accounts.getPlugin(nextHop)\n    log.debug('sending quote request packet. connector=%s', nextHop)\n    const quoteResponsePacket = await plugin.sendData(quoteRequestPacket)\n\n    if (quoteResponsePacket[0] === IlpPacket.Type.TYPE_ILQP_LIQUIDITY_RESPONSE) {\n      const data = IlpPacket.deserializeIlqpLiquidityResponse(quoteResponsePacket)\n      return {\n        curve: new LiquidityCurve(data.liquidityCurve),\n        prefix: data.appliesToPrefix,\n        expiry: new Date(data.expiresAt),\n        minMessageWindow: data.sourceHoldDuration - DESTINATION_HOLD_DURATION\n      }\n    } else {\n      throw new InternalError('remote quote error.')\n    }\n  }\n\n  cacheCurve ({ prefix, curve, expiry, minMessageWindow }: CachedCurve) {\n    log.debug('caching curve. prefix=%s expiry=%s minMessageWindow=%s', prefix, expiry, minMessageWindow)\n    this.cache.insert(prefix, {\n      prefix,\n      curve,\n      expiry,\n      minMessageWindow\n    })\n  }\n}\n"]}