{"version":3,"file":"stats.js","sourceRoot":"","sources":["stats.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AAUvC;IAGE,YAAa,IAAQ,EAAE,EAAE,KAAK,EAAsB;QAClD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAE,SAAoB,EAAE,SAAiB;QAC7D,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,GAAG,SAAS,CAAC;SACnE,CAAC,CAAA;QAEF,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC;YACjC,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,KAAK,EAAE,MAAc,EAAE,IAAsC,EAAE,EAAE;gBACvE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,sBAAsB,GAAG,SAAS,EAAE,CAAC,MAAM,CAAC,CAAA;gBAC/D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACrB,CAAC;SACF,CAAC,CAAA;QAEF,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,GAAG,SAAS,CAAC;SACnE,CAAC,CAAA;QAEF,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC;YACjC,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,KAAK,EAAE,MAAc,EAAE,IAAsC,EAAE,EAAE;gBACvE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,sBAAsB,GAAG,SAAS,EAAE,CAAC,MAAM,CAAC,CAAA;gBAC/D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACrB,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;IAEO,kBAAkB,CAAE,MAAc;QACxC,MAAM,CAAC,KAAK,EAAE,IAAY,EAAE,IAAwC,EAAE,EAAE;YACtE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAClE,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;YACxD,EAAE,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACrC,IAAI,MAAM,CAAA;YACV,IAAI,CAAC;gBACH,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAA;YAC3B,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,MAAM,CAAC,CAAA;gBAC/C,MAAM,GAAG,CAAA;YACX,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,YAAY,EAAE,CAAC,MAAM,CAAC,CAAA;YACpD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC,MAAM,CAAC,CAAA;YACnD,CAAC;YACD,MAAM,CAAC,MAAM,CAAA;QACf,CAAC,CAAA;IACH,CAAC;CACF;AAvDD,kCAuDC","sourcesContent":["import * as IlpPacket from 'ilp-packet'\nimport {\n  Middleware,\n  MiddlewareCallback,\n  MiddlewareMethod,\n  MiddlewareServices,\n  MiddlewareStats,\n  Pipelines\n} from '../types/middleware'\n\nexport default class StatsMiddleware implements Middleware {\n  private stats: MiddlewareStats\n\n  constructor (opts: {}, { stats }: MiddlewareServices) {\n    this.stats = stats\n  }\n\n  async applyToPipelines (pipelines: Pipelines, accountId: string) {\n    pipelines.incomingData.insertLast({\n      name: 'stats',\n      method: this.makeDataMiddleware('stats/incomingData/' + accountId)\n    })\n\n    pipelines.incomingMoney.insertLast({\n      name: 'stats',\n      method: async (amount: string, next: MiddlewareCallback<string, void>) => {\n        this.stats.counter('stats/incomingMoney/' + accountId, +amount)\n        return next(amount)\n      }\n    })\n\n    pipelines.outgoingData.insertLast({\n      name: 'stats',\n      method: this.makeDataMiddleware('stats/outgoingData/' + accountId)\n    })\n\n    pipelines.outgoingMoney.insertLast({\n      name: 'stats',\n      method: async (amount: string, next: MiddlewareCallback<string, void>) => {\n        this.stats.counter('stats/outgoingMoney/' + accountId, +amount)\n        return next(amount)\n      }\n    })\n  }\n\n  private makeDataMiddleware (prefix: string): MiddlewareMethod<Buffer,Buffer> {\n    return async (data: Buffer, next: MiddlewareCallback<Buffer, Buffer>) => {\n      if (data[0] !== IlpPacket.Type.TYPE_ILP_PREPARE) return next(data)\n      const { amount } = IlpPacket.deserializeIlpPrepare(data)\n      if (amount === '0') return next(data)\n      let result\n      try {\n        result = await next(data)\n      } catch (err) {\n        this.stats.counter(prefix + '/failed', +amount)\n        throw err\n      }\n      if (result[0] === IlpPacket.Type.TYPE_ILP_FULFILL) {\n        this.stats.counter(prefix + '/fulfilled', +amount)\n      } else {\n        this.stats.counter(prefix + '/rejected', +amount)\n      }\n      return result\n    }\n  }\n}\n"]}