{"version":3,"file":"origin-whitelist.js","sourceRoot":"","sources":["origin-whitelist.ts"],"names":[],"mappings":";;AAAA,iCAAgC;AAEhC;IAGE,YAAa,cAAwB;QAF7B,eAAU,GAAa,EAAE,CAAA;QAG/B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,2CAA2C,CAAC,CAAA;QAClF,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACpE,CAAC;IAED,GAAG,CAAE,MAAc;QACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;IAC1C,CAAC;IAED,IAAI,CAAE,MAAc;QAClB,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;YAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;gBAAE,OAAO,IAAI,CAAA;SAChC;QACD,OAAO,KAAK,CAAA;IACd,CAAC;CACF;AAlBD,kCAkBC","sourcesContent":["import * as assert from 'assert'\n\nexport default class OriginWhitelist {\n  private _whitelist: RegExp[] = []\n\n  constructor (allowedOrigins: string[]) {\n    assert(Array.isArray(allowedOrigins), 'parameter allowedOrigins must be an array')\n    allowedOrigins.forEach((o) => this._whitelist.push(new RegExp(o)))\n  }\n\n  add (origin: string) {\n    this._whitelist.push(new RegExp(origin))\n  }\n\n  isOk (origin: string) {\n    for (const l of this._whitelist) {\n      if (l.test(origin)) return true\n    }\n    return false\n  }\n}\n"]}