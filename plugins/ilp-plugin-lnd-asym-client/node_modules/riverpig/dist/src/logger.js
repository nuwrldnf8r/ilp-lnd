"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const blackmagic_1 = require("./blackmagic");
const logger_config_1 = require("./interfaces/logger-config");
const config_1 = require("./config");
const standard_1 = require("./formatters/standard");
let nextNamespaceId = 0;
class Logger {
    constructor(namespace, config0) {
        const config = Object.assign({}, config_1.getEnvConfig(), config0);
        this.stream = config.stream;
        this.format = config.format;
        const formatter = standard_1.default(config);
        const namespaceId = nextNamespaceId++;
        const debug = require('debug');
        const debugLog = debug(namespace);
        const shouldGetCallsite = config.lineInfo !== logger_config_1.LineinfoSetting.None;
        debugLog.riverpigNamespaceId = namespaceId;
        debug.log = this.write.bind(this);
        debug.formatArgs = function (message, ...elements) {
            const callsite = shouldGetCallsite ? blackmagic_1.getCallsite(this) : undefined;
            if (typeof this.riverpigNamespaceId === 'undefined') {
                this.riverpigNamespaceId = nextNamespaceId++;
            }
            if (Array.isArray(message)) {
                message.splice(0, message.length, formatter({
                    message: message[0],
                    callsite,
                    namespace: this.namespace,
                    namespaceId: this.riverpigNamespaceId,
                    level: 'debug',
                    timestamp: new Date(),
                    arguments: message.slice(1)
                }));
                return;
            }
            else {
                return [formatter({
                        message,
                        callsite,
                        namespace: this.namespace,
                        namespaceId: this.riverpigNamespaceId,
                        level: 'debug',
                        timestamp: new Date(),
                        arguments: elements
                    })];
            }
        };
        const createLogFunction = (level, namespace, namespaceId) => {
            const logFn = (message, ...elements) => {
                const callsite = shouldGetCallsite ? blackmagic_1.getCallsite(logFn) : undefined;
                this.write(formatter({
                    message,
                    callsite,
                    namespace,
                    namespaceId,
                    level,
                    timestamp: new Date(),
                    arguments: elements
                }));
            };
            return logFn;
        };
        this.debug = debugLog;
        this.info = createLogFunction('info', namespace, namespaceId);
        this.warn = createLogFunction('warn', namespace, namespaceId);
        this.error = createLogFunction('error', namespace, namespaceId);
    }
    setOutputStream(stream) {
        this.stream = stream;
    }
    setStringFormatter(format) {
        this.format = format;
    }
    write(...args) {
        this.stream.write(`${this.format.apply(null, args)}\n`);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map