/// <reference types="node" />
import BigNumber from 'bignumber.js';
declare module 'bignumber.js' {
    interface BigNumber {
        isBigNumber: true;
    }
}
export declare type Point = [BigNumber, BigNumber];
export declare type LooselyTypedNumber = BigNumber | string | number;
export declare type LooselyTypedPoint = [LooselyTypedNumber, LooselyTypedNumber];
export declare class InvalidLiquidityCurveError extends Error {
    constructor(message: string, points?: any);
}
export default class LiquidityCurve {
    protected data: Buffer;
    protected points: Point[];
    constructor(data: string | LooselyTypedPoint[] | Buffer);
    setData(data: Buffer): void;
    amountAt(xVal: LooselyTypedNumber): BigNumber;
    amountReverse(yVal: LooselyTypedNumber): BigNumber;
    combine(curve: LiquidityCurve): default;
    _mapToMax(points: Point[]): [BigNumber, BigNumber][];
    _crossovers(curve: LiquidityCurve): [BigNumber, BigNumber][];
    _eachOverlappingSegment(pointsA: Point[], pointsB: Point[], each: (p1: Point, p2: Point, p3: Point, p4: Point) => void): void;
    join(curve: LiquidityCurve): default;
    shiftX(_dx: number): default;
    shiftY(_dy: number): default;
    getPoints(): number[][];
    toBuffer(): Buffer;
}
