export default class PrefixMap<T> {
    protected prefixes: string[];
    protected items: {
        [key: string]: T;
    };
    constructor();
    keys(): string[];
    size(): number;
    resolve(key: string): T | undefined;
    resolvePrefix(key: string): string | undefined;
    get(prefix: string): T | undefined;
    getKeysStartingWith(prefix: string): IterableIterator<string>;
    getKeysPrefixesOf(search: string): IterableIterator<string>;
    each(fn: (item: T, key: string) => void): void;
    insert(prefix: string, item: T): T;
    delete(prefix: string): void;
    toJSON(): {
        [key: string]: T;
    };
    getShortestUnambiguousPrefix(address: string, prefix?: string): string;
}
