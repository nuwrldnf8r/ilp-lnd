{"version":3,"file":"validate-fulfillment.js","sourceRoot":"","sources":["validate-fulfillment.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,uCAAsD;AACtD,MAAM,GAAG,GAAG,YAAY,CAAC,iCAAiC,CAAC,CAAA;AAC3D,wCAAuC;AAEvC,MAAM,EAAE,gBAAgB,EAAE,GAAG,SAAS,CAAC,MAAM,CAAA;AAE7C;IACE,KAAK,CAAC,gBAAgB,CAAE,SAAoB,EAAE,SAAiB;QAC7D,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,IAAI,EAAE,qBAAqB;YAC3B,MAAM,EAAE,KAAK,EAAE,IAAY,EAAE,IAAwC,EAAE,EAAE;gBACvE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAChD,MAAM,EAAE,kBAAkB,EAAE,GAAG,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;oBAEpE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAA;oBAE/B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAClD,MAAM,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAA;wBAC/D,MAAM,mBAAmB,GAAG,mBAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAA;wBAE7E,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;4BACpD,GAAG,CAAC,IAAI,CAAC,uHAAuH,EAAE,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;4BAC3P,MAAM,IAAI,gBAAgB,CAAC,2CAA2C,CAAC,CAAA;wBACzE,CAAC;oBACH,CAAC;oBAED,MAAM,CAAC,MAAM,CAAA;gBACf,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACnB,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;CACF;AA3BD,gDA2BC","sourcesContent":["import { createHash } from 'crypto'\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('validate-fulfillment-middleware')\nimport * as IlpPacket from 'ilp-packet'\nimport { Middleware, MiddlewareCallback, Pipelines } from '../types/middleware'\nconst { UnreachableError } = IlpPacket.Errors\n\nexport default class ValidateFulfillmentMiddleware implements Middleware {\n  async applyToPipelines (pipelines: Pipelines, accountId: string) {\n    pipelines.outgoingData.insertLast({\n      name: 'validateFulfillment',\n      method: async (data: Buffer, next: MiddlewareCallback<Buffer, Buffer>) => {\n        if (data[0] === IlpPacket.Type.TYPE_ILP_PREPARE) {\n          const { executionCondition } = IlpPacket.deserializeIlpPrepare(data)\n\n          const result = await next(data)\n\n          if (result[0] === IlpPacket.Type.TYPE_ILP_FULFILL) {\n            const { fulfillment } = IlpPacket.deserializeIlpFulfill(result)\n            const calculatedCondition = createHash('sha256').update(fulfillment).digest()\n\n            if (!calculatedCondition.equals(executionCondition)) {\n              log.warn('received incorrect fulfillment from account. accountId=%s fulfillment=%s calculatedCondition=%s executionCondition=%s', accountId, fulfillment.toString('base64'), calculatedCondition.toString('base64'), executionCondition.toString('base64'))\n              throw new UnreachableError('fulfillment did not match expected value.')\n            }\n          }\n\n          return result\n        }\n\n        return next(data)\n      }\n    })\n  }\n}\n"]}