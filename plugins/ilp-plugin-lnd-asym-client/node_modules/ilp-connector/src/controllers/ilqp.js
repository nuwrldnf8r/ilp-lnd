"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IlpPacket = require("ilp-packet");
const route_builder_1 = require("../services/route-builder");
const log_1 = require("../common/log");
const log = log_1.create('ilqp');
const { InvalidPacketError } = IlpPacket.Errors;
class IlqpController {
    constructor(deps) {
        this.routeBuilder = deps(route_builder_1.default);
    }
    async sendData(packet, sourceAccount) {
        log.debug('responding to ILQP quote request. clientName=' + sourceAccount);
        switch (packet[0]) {
            case IlpPacket.Type.TYPE_ILQP_LIQUIDITY_REQUEST:
                return IlpPacket.serializeIlqpLiquidityResponse(await this.routeBuilder.quoteLiquidity(sourceAccount, IlpPacket.deserializeIlqpLiquidityRequest(packet)));
            case IlpPacket.Type.TYPE_ILQP_BY_SOURCE_REQUEST:
                return IlpPacket.serializeIlqpBySourceResponse(await this.routeBuilder.quoteBySource(sourceAccount, IlpPacket.deserializeIlqpBySourceRequest(packet)));
            case IlpPacket.Type.TYPE_ILQP_BY_DESTINATION_REQUEST:
                return IlpPacket.serializeIlqpByDestinationResponse(await this.routeBuilder.quoteByDestination(sourceAccount, IlpPacket.deserializeIlqpByDestinationRequest(packet)));
            default:
                throw new InvalidPacketError('packet has unexpected type.');
        }
    }
}
exports.default = IlqpController;
//# sourceMappingURL=ilqp.js.map