{"version":3,"file":"log.js","sourceRoot":"","sources":["log.ts"],"names":[],"mappings":";;AAAA,qCAAoC;AAEpC,qCAAqC;AACrC,MAAM,SAAS,GAAG,QAAQ,EAAE,CAAA;AAC5B,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;AAMjB,QAAA,SAAS,GAAG,CAAC,SAAiB,EAAmB,EAAE;IAC9D,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE;QACzB,MAAM,EAAE,SAAS;KAClB,CAAC,CAAA;AACJ,CAAC,CAAA;AAEY,QAAA,MAAM,GAAG,CAAC,SAAiB,EAAE,EAAE,CAAC,iBAAS,CAAC,YAAY,GAAG,SAAS,CAAC,CAAA;AAEhF,IAAI,YAAY,GAAG,OAAO,CAAC,MAAM,CAAA;AACpB,QAAA,eAAe,GAAG,CAAC,eAAmC,EAAE,EAAE;IACrE,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;IAC9B,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;IAC/B,YAAY,GAAG,eAAe,CAAA;AAChC,CAAC,CAAA","sourcesContent":["import * as riverpig from 'riverpig'\n\nimport through2 = require('through2')\nconst logStream = through2()\nlogStream.pipe(process.stdout)\n\n// TODO: Not clear why I needed this, but got a\n//   TypeScript error without it.\nexport interface ConnectorLogger extends riverpig.Logger { }\n\nexport const createRaw = (namespace: string): ConnectorLogger => {\n  return riverpig(namespace, {\n    stream: logStream\n  })\n}\n\nexport const create = (namespace: string) => createRaw('connector:' + namespace)\n\nlet outputStream = process.stdout\nexport const setOutputStream = (newOutputStream: NodeJS.WriteStream) => {\n  logStream.unpipe(outputStream)\n  logStream.pipe(newOutputStream)\n  outputStream = newOutputStream\n}\n"]}