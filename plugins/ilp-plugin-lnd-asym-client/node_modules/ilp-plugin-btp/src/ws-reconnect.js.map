{"version":3,"file":"ws-reconnect.js","sourceRoot":"","sources":["ws-reconnect.ts"],"names":[],"mappings":";;AACA,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;AAC1C,iDAA6C;AAC7C,MAAM,KAAK,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAA;AAE9C,MAAM,0BAA0B,GAAG,IAAI,CAAA;AAWvC,0BAAkC,SAAQ,6BAAa;IAOrD,YAAa,OAA+C;QAC1D,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,IAAI,0BAA0B,CAAA;QAC/D,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAA;IACpC,CAAC;IAED,IAAI,CAAE,GAAW;QACf,IAAI,CAAC,IAAI,GAAG,GAAG,CAAA;QACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChD,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;QACvD,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAY,EAAE,MAAc,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;QACnF,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAA;QAChE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAoB,EAAE,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAA;QACvF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAA;IAClE,CAAC;IAGD,IAAI,CAAE,IAAS,EAAE,EAAyB;QACxC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;IACtC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAA;QACnC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAClB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;IACxB,CAAC;IAEO,UAAU,CAAE,WAA2B;QAC7C,KAAK,CAAC,KAAK,CAAC,+BAA+B,WAAW,kBAAkB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAA;QACzF,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QACvB,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAA;QACnC,UAAU,CAAC,GAAG,EAAE;YACd,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC3B,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;QAClB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACpB,CAAC;CACF;AA3CD,oDA2CC","sourcesContent":["import * as WebSocket from 'ws'\nconst createLogger = require('ilp-logger')\nimport { EventEmitter2 } from 'eventemitter2'\nconst debug = createLogger('ilp-ws-reconnect')\n\nconst DEFAULT_RECONNECT_INTERVAL = 5000\n\nexport interface WebSocketConstructor {\n  new (url: string): WebSocket\n}\n\nexport interface WebSocketReconnectorConstructorOptions {\n  interval?: number\n  WebSocket: WebSocketConstructor\n}\n\nexport class WebSocketReconnector extends EventEmitter2 {\n  private _interval: number\n  private _url: string\n  private _instance: WebSocket\n  private _connected: boolean\n  private WebSocket: WebSocketConstructor\n\n  constructor (options: WebSocketReconnectorConstructorOptions) {\n    super()\n    this._interval = options.interval || DEFAULT_RECONNECT_INTERVAL\n    this.WebSocket = options.WebSocket\n  }\n\n  open (url: string) {\n    this._url = url\n    this._instance = new (this.WebSocket)(this._url)\n    this._instance.on('open', () => void this.emit('open'))\n    this._instance.on('close', (code: number, reason: string) => this._reconnect(code))\n    this._instance.on('error', (err: Error) => this._reconnect(err))\n    this._instance.on('message', (data: WebSocket.Data) => void this.emit('message', data))\n    return new Promise((resolve) => void this.once('open', resolve))\n  }\n\n  // uses callback to match normal ws api\n  send (data: any, cb?: (err: Error) => void): void {\n    return this._instance.send(data, cb)\n  }\n\n  close () {\n    this._instance.removeAllListeners()\n    this.emit('close')\n    this._instance.close()\n  }\n\n  private _reconnect (codeOrError: number | Error) {\n    debug.debug(`websocket disconnected with ${codeOrError}; reconnect in ${this._interval}`)\n    this._connected = false\n    this._instance.removeAllListeners()\n    setTimeout(() => {\n      void this.open(this._url)\n    }, this._interval)\n    this.emit('close')\n  }\n}\n"]}