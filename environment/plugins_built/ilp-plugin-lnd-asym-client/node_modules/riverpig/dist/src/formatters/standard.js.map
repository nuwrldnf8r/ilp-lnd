{"version":3,"file":"standard.js","sourceRoot":"","sources":["../../../src/formatters/standard.ts"],"names":[],"mappings":";;AAAA,iCAAyB;AACzB,6BAA6B;AAC7B,+BAA6B;AAG7B,+DAAmF;AAEnF,MAAM,WAAW,GAAG;IAClB,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,QAAQ;IACd,KAAK,EAAE,KAAK;CACb,CAAA;AAED,MAAM,cAAc,GAAG;IACrB,MAAM;IACN,OAAO;IACP,QAAQ;IACR,MAAM;IACN,SAAS;IACT,KAAK;CACN,CAAA;AAED,MAAM,wBAAwB,GAAG,CAAC,MAA4B,EAAqC,EAAE;IACnG,MAAM,oBAAoB,GAAG,wBAAwB,CAAA;IACrD,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;IAEzB,IAAI,MAAM,CAAC,QAAQ,KAAK,+BAAe,CAAC,IAAI,EAAE;QAC5C,OAAO,GAAG,EAAE,CAAC,EAAE,CAAA;KAChB;SAAM;QACL,OAAO,CAAC,QAAmB,EAAU,EAAE;YACrC,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO,YAAY,CAAA;aACpB;YAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAA;YACvC,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO,SAAS,CAAA;aACjB;YAED,IAAI,IAAI,GAAG,SAAS,CAAA;YACpB,IAAI,MAAM,CAAC,QAAQ,KAAK,+BAAe,CAAC,IAAI,EAAE;gBAC5C,IAAI,GAAG,QAAQ,CAAA;aAChB;iBAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,+BAAe,CAAC,QAAQ,EAAE;gBACvD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;aAC/B;iBAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,+BAAe,CAAC,KAAK,EAAE;gBACpD,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,CAAA;aAC3E;iBAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,+BAAe,CAAC,KAAK,EAAE;gBACpD,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBAC/B,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;iBACtC;qBAAM;oBACL,IAAI,GAAG,QAAQ,CAAA;iBAChB;aACF;YAED,OAAO,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,aAAa,EAAE,GAAG,GAAG,CAAA;QACpD,CAAC,CAAA;KACF;AACH,CAAC,CAAA;AAED,uBAAwB,IAAY,EAAE,EAAU;IAC9C,OAAO,eAAK,CAAC,cAAc,CAAC,EAAE,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;AAChE,CAAC;AAED,kBAAe,CAAC,MAA4B,EAAE,EAAE;IAC9C,MAAM,eAAe,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAA;IAExD,OAAO,CAAC,KAAe,EAAU,EAAE;QACjC,OAAO,eAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG;YACpD,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC/B,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,GAAG,GAAG;YACvD,eAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG;YAClD,aAAM,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,CAAA;IAC7C,CAAC,CAAA;AACH,CAAC,CAAA","sourcesContent":["import chalk from 'chalk'\nimport path = require('path')\nimport { format } from 'util'\nimport { LogEntry } from '../interfaces/log-entry'\nimport { CallSite } from '../interfaces/call-site'\nimport { CompleteLoggerConfig, LineinfoSetting } from '../interfaces/logger-config'\n\nconst levelColors = {\n  debug: 'green',\n  info: 'blue',\n  warn: 'yellow',\n  error: 'red'\n}\n\nconst callsiteColors = [\n  'cyan',\n  'green',\n  'yellow',\n  'blue',\n  'magenta',\n  'red'\n]\n\nconst createLocationInfoLogger = (config: CompleteLoggerConfig): ((callsite?: CallSite) => string) => {\n  const PATH_SHORTENER_REGEX = /(?!\\/)(.)[^\\/]*(?=\\/)/g\n  const cwd = process.cwd()\n\n  if (config.lineInfo === LineinfoSetting.None) {\n    return () => ''\n  } else {\n    return (callsite?: CallSite): string => {\n      if (!callsite) {\n        return 'unknown:0 '\n      }\n\n      const pathName = callsite.getFileName()\n      if (!pathName) {\n        return 'eval:0 '\n      }\n\n      let name = 'unknown'\n      if (config.lineInfo === LineinfoSetting.Long) {\n        name = pathName\n      } else if (config.lineInfo === LineinfoSetting.FileOnly) {\n        name = path.basename(pathName)\n      } else if (config.lineInfo === LineinfoSetting.Short) {\n        name = pathName.replace(PATH_SHORTENER_REGEX, (_, firstChar) => firstChar)\n      } else if (config.lineInfo === LineinfoSetting.Smart) {\n        if (pathName.indexOf(cwd) === 0) {\n          name = pathName.slice(cwd.length + 1)\n        } else {\n          name = pathName\n        }\n      }\n\n      return name + ':' + callsite.getLineNumber() + ' '\n    }\n  }\n}\n\nfunction callsiteColor (name: string, id: number) {\n  return chalk[callsiteColors[id % callsiteColors.length]](name)\n}\n\nexport default (config: CompleteLoggerConfig) => {\n  const getLocationInfo = createLocationInfoLogger(config)\n\n  return (entry: LogEntry): string => {\n    return chalk.gray(entry.timestamp.toISOString()) + ' ' +\n      getLocationInfo(entry.callsite) +\n      callsiteColor(entry.namespace, entry.namespaceId) + ' ' +\n      chalk[levelColors[entry.level]](entry.level) + ' ' +\n      format(entry.message, ...entry.arguments)\n  }\n}\n"]}