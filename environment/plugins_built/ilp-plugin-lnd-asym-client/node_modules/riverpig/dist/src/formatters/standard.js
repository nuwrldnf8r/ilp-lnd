"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const path = require("path");
const util_1 = require("util");
const logger_config_1 = require("../interfaces/logger-config");
const levelColors = {
    debug: 'green',
    info: 'blue',
    warn: 'yellow',
    error: 'red'
};
const callsiteColors = [
    'cyan',
    'green',
    'yellow',
    'blue',
    'magenta',
    'red'
];
const createLocationInfoLogger = (config) => {
    const PATH_SHORTENER_REGEX = /(?!\/)(.)[^\/]*(?=\/)/g;
    const cwd = process.cwd();
    if (config.lineInfo === logger_config_1.LineinfoSetting.None) {
        return () => '';
    }
    else {
        return (callsite) => {
            if (!callsite) {
                return 'unknown:0 ';
            }
            const pathName = callsite.getFileName();
            if (!pathName) {
                return 'eval:0 ';
            }
            let name = 'unknown';
            if (config.lineInfo === logger_config_1.LineinfoSetting.Long) {
                name = pathName;
            }
            else if (config.lineInfo === logger_config_1.LineinfoSetting.FileOnly) {
                name = path.basename(pathName);
            }
            else if (config.lineInfo === logger_config_1.LineinfoSetting.Short) {
                name = pathName.replace(PATH_SHORTENER_REGEX, (_, firstChar) => firstChar);
            }
            else if (config.lineInfo === logger_config_1.LineinfoSetting.Smart) {
                if (pathName.indexOf(cwd) === 0) {
                    name = pathName.slice(cwd.length + 1);
                }
                else {
                    name = pathName;
                }
            }
            return name + ':' + callsite.getLineNumber() + ' ';
        };
    }
};
function callsiteColor(name, id) {
    return chalk_1.default[callsiteColors[id % callsiteColors.length]](name);
}
exports.default = (config) => {
    const getLocationInfo = createLocationInfoLogger(config);
    return (entry) => {
        return chalk_1.default.gray(entry.timestamp.toISOString()) + ' ' +
            getLocationInfo(entry.callsite) +
            callsiteColor(entry.namespace, entry.namespaceId) + ' ' +
            chalk_1.default[levelColors[entry.level]](entry.level) + ' ' +
            util_1.format(entry.message, ...entry.arguments);
    };
};
//# sourceMappingURL=standard.js.map