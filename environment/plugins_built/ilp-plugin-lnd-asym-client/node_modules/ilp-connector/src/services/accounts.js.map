{"version":3,"file":"accounts.js","sourceRoot":"","sources":["accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import reduct = require('reduct')\nimport compat from 'ilp-compat-plugin'\nimport Store from '../services/store'\nimport Config from './config'\nimport { EventEmitter } from 'events'\nimport { AccountInfo } from '../types/accounts'\nimport {\n  ConnectOptions,\n  PluginInstance\n} from '../types/plugin'\nimport ILDCP = require('ilp-protocol-ildcp')\n\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('accounts')\n\nexport interface AccountEntry {\n  plugin: PluginInstance,\n  info: AccountInfo\n}\n\nexport default class Accounts extends EventEmitter {\n  protected config: Config\n  protected store: Store\n\n  protected address: string\n  protected accounts: Map<string, AccountEntry>\n\n  constructor (deps: reduct.Injector) {\n    super()\n\n    this.config = deps(Config)\n    this.store = deps(Store)\n\n    this.address = this.config.ilpAddress || 'unknown'\n    this.accounts = new Map()\n  }\n\n  async loadIlpAddress () {\n    const inheritFrom = this.config.ilpAddressInheritFrom ||\n      // Get account id of first parent\n      [...this.accounts]\n        .filter(([key, value]) => value.info.relation === 'parent')\n        .map(([key]) => key)[0]\n\n    if (this.config.ilpAddress === 'unknown' && !inheritFrom) {\n      throw new Error('When there is no parent, ILP address must be specified in configuration.')\n    } else if (this.config.ilpAddress === 'unknown' && inheritFrom) {\n      const parent = this.getPlugin(inheritFrom)\n\n      log.debug('connecting to parent. accountId=%s', inheritFrom)\n      await parent.connect({})\n\n      const ildcpInfo = await ILDCP.fetch(parent.sendData.bind(parent))\n\n      this.setOwnAddress(ildcpInfo.clientAddress)\n\n      if (this.address === 'unknown') {\n        log.error('could not get ilp address from parent.')\n        throw new Error('no ilp address configured.')\n      }\n    }\n  }\n\n  async connect (options: ConnectOptions) {\n    const unconnectedAccounts = Array.from(this.accounts.values())\n      .filter(account => !account.plugin.isConnected())\n    return Promise.all(unconnectedAccounts.map(account => account.plugin.connect(options)))\n  }\n\n  async disconnect () {\n    const connectedAccounts = Array.from(this.accounts.values())\n      .filter(account => account.plugin.isConnected())\n    return Promise.all(connectedAccounts.map(account => account.plugin.disconnect()))\n  }\n\n  getOwnAddress () {\n    return this.address\n  }\n\n  setOwnAddress (newAddress) {\n    log.info('setting ilp address. oldAddress=%s newAddress=%s', this.address, newAddress)\n    this.address = newAddress\n  }\n\n  getPlugin (accountId: string) {\n    const account = this.accounts.get(accountId)\n\n    if (!account) {\n      log.warn('could not find plugin for account id. accountId=%s', accountId)\n      throw new Error('unknown account id. accountId=' + accountId)\n    }\n\n    return account.plugin\n  }\n\n  exists (accountId: string) {\n    return this.accounts.has(accountId)\n  }\n\n  getAccountIds () {\n    return Array.from(this.accounts.keys())\n  }\n\n  getAssetCode (accountId: string) {\n    const account = this.accounts.get(accountId)\n\n    if (!account) {\n      log.debug('no currency found. account=%s', accountId)\n      return undefined\n    }\n\n    return account.info.assetCode\n  }\n\n  add (accountId: string, creds: any) {\n    log.info('add account. accountId=%s', accountId)\n\n    // Although cloning the options object that comes in from\n    // code that includes ilp-connector is good practice,\n    // this breaks for instance when the plugin options\n    // contain for instance a https server like in `wsOpts` in\n    // https://github.com/interledgerjs/ilp-plugin-mini-accounts/blob/a77f1a6b984b6816856a0948dfa57fe95e7ddd8b/README.md#example\n    //\n    // creds = cloneDeep(creds)\n\n    try {\n      this.config.validateAccount(accountId, creds)\n    } catch (err) {\n      if (err.name === 'InvalidJsonBodyError') {\n        log.warn('validation error in account config. id=%s', accountId)\n        err.debugPrint(log.warn)\n        throw new Error('error while adding account, see error log for details.')\n      }\n\n      throw err\n    }\n\n    const Plugin = require(creds.plugin)\n\n    const api: any = {}\n    // Lazily create plugin utilities\n    Object.defineProperty(api, 'store', {\n      get: () => {\n        return this.store.getPluginStore(accountId)\n      }\n    })\n    Object.defineProperty(api, 'log', {\n      get: () => {\n        return createLogger(`${creds.plugin}[${accountId}]`)\n      }\n    })\n\n    const opts = Object.assign({}, creds.options)\n    // Provide old deprecated _store and _log properties\n    Object.defineProperty(opts, '_store', {\n      get: () => {\n        log.warn('DEPRECATED: plugin accessed deprecated _store property. accountId=%s', accountId)\n        return api.store\n      }\n    })\n    Object.defineProperty(opts, '_log', {\n      get: () => {\n        log.warn('DEPRECATED: plugin accessed deprecated _log property. accountId=%s', accountId)\n        return api.log\n      }\n    })\n\n    const plugin = compat(new Plugin(opts, api))\n\n    this.accounts.set(accountId, {\n      info: creds,\n      plugin\n    })\n\n    this.emit('add', accountId, plugin)\n  }\n\n  remove (accountId: string) {\n    const plugin = this.getPlugin(accountId)\n    if (!plugin) {\n      return undefined\n    }\n    log.info('remove account. accountId=' + accountId)\n\n    this.emit('remove', accountId, plugin)\n\n    this.accounts.delete(accountId)\n    return plugin\n  }\n\n  getInfo (accountId: string) {\n    const account = this.accounts.get(accountId)\n\n    if (!account) {\n      throw new Error('unknown account id. accountId=' + accountId)\n    }\n\n    return account.info\n  }\n\n  getChildAddress (accountId: string) {\n    const info = this.getInfo(accountId)\n\n    if (info.relation !== 'child') {\n      throw new Error('Can\\'t generate child address for account that is isn\\'t a child')\n    }\n\n    const ilpAddressSegment = info.ilpAddressSegment || accountId\n\n    return this.address + '.' + ilpAddressSegment\n  }\n\n  getStatus () {\n    const accounts = {}\n    this.accounts.forEach((account, accountId) => {\n      accounts[accountId] = {\n        // Set info.options to undefined so that credentials aren't exposed.\n        info: Object.assign({}, account.info, { options: undefined }),\n        connected: account.plugin.isConnected()\n      }\n    })\n    return {\n      address: this.address,\n      accounts\n    }\n  }\n}\n"]}