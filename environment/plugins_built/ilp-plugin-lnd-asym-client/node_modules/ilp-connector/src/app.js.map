{"version":3,"file":"app.js","sourceRoot":"","sources":["app.ts"],"names":[],"mappings":"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","sourcesContent":["import reduct = require('reduct')\nimport { partial } from 'lodash'\nimport { create as createLogger } from './common/log'\nconst log = createLogger('app')\n\nimport Config from './services/config'\nimport RouteBuilder from './services/route-builder'\nimport RouteBroadcaster from './services/route-broadcaster'\nimport Accounts from './services/accounts'\nimport RateBackend from './services/rate-backend'\nimport Store from './services/store'\nimport MiddlewareManager from './services/middleware-manager'\nimport AdminApi from './services/admin-api'\n\nimport { PluginInstance } from './types/plugin'\n\nfunction listen (\n  config: Config,\n  accounts: Accounts,\n  backend: RateBackend,\n  store: Store,\n  routeBuilder: RouteBuilder,\n  routeBroadcaster: RouteBroadcaster,\n  middlewareManager: MiddlewareManager,\n  adminApi: AdminApi\n) {\n  // Start a coroutine that connects to the backend and\n  // subscribes to all the accounts in the background\n  return (async function () {\n    try {\n      await backend.connect()\n    } catch (error) {\n      log.error(error)\n      process.exit(1)\n    }\n\n    await middlewareManager.setup()\n\n    // If we have no configured ILP address, try to get one via ILDCP\n    await accounts.loadIlpAddress()\n\n    if (config.routeBroadcastEnabled) {\n      routeBroadcaster.start()\n    }\n\n    // Connect other plugins, give up after initialConnectTimeout\n    await new Promise((resolve, reject) => {\n      const connectTimeout = setTimeout(() => {\n        log.warn('one or more accounts failed to connect within the time limit, continuing anyway.')\n        resolve()\n      }, config.initialConnectTimeout)\n      accounts.connect({ timeout: config.initialConnectTimeout })\n        .then(() => {\n          clearTimeout(connectTimeout)\n          resolve()\n        }, reject)\n    })\n\n    await middlewareManager.startup()\n\n    adminApi.listen()\n\n    log.info('connector ready (republic attitude). address=%s', accounts.getOwnAddress())\n  })().catch((err) => log.error(err))\n}\n\nasync function addPlugin (\n  config: Config,\n  accounts: Accounts,\n  backend: RateBackend,\n  routeBroadcaster: RouteBroadcaster,\n  middlewareManager: MiddlewareManager,\n\n  id: string,\n  options: any\n) {\n  accounts.add(id, options)\n  const plugin = accounts.getPlugin(id)\n  await middlewareManager.addPlugin(id, plugin)\n\n  await plugin.connect({ timeout: Infinity })\n  routeBroadcaster.track(id)\n}\n\nasync function removePlugin (\n  config: Config,\n  accounts: Accounts,\n  backend: RateBackend,\n  routeBroadcaster: RouteBroadcaster,\n  middlewareManager: MiddlewareManager,\n\n  id: string\n) {\n  const plugin = accounts.getPlugin(id)\n  middlewareManager.removePlugin(id, plugin)\n  await plugin.disconnect()\n  routeBroadcaster.untrack(id)\n  accounts.remove(id)\n}\n\nfunction getPlugin (\n  accounts: Accounts,\n\n  id: string\n) {\n  return accounts.getPlugin(id)\n}\n\nfunction shutdown (\n  accounts: Accounts,\n  routeBroadcaster: RouteBroadcaster\n) {\n  routeBroadcaster.stop()\n  return accounts.disconnect()\n}\n\nexport default function createApp (opts?: object, container?: reduct.Injector) {\n  const deps = container || reduct()\n\n  const config = deps(Config)\n\n  try {\n    if (opts) {\n      config.loadFromOpts(opts)\n    } else {\n      config.loadFromEnv()\n    }\n  } catch (err) {\n    if (err.name === 'InvalidJsonBodyError') {\n      log.warn('config validation error.')\n      err.debugPrint(log.warn)\n      log.error('invalid configuration, shutting down.')\n      throw new Error('failed to initialize due to invalid configuration.')\n    }\n\n    throw err\n  }\n\n  const accounts = deps(Accounts)\n  const routeBuilder = deps(RouteBuilder)\n  const routeBroadcaster = deps(RouteBroadcaster)\n  const backend = deps(RateBackend)\n  const store = deps(Store)\n  const middlewareManager = deps(MiddlewareManager)\n  const adminApi = deps(AdminApi)\n\n  const credentials = config.accounts\n  // We have two separate for loops to make the logs look nicer :)\n  for (let id of Object.keys(credentials)) {\n    accounts.add(id, credentials[id])\n  }\n\n  return {\n    config,\n    listen: partial(listen, config, accounts, backend, store, routeBuilder, routeBroadcaster, middlewareManager, adminApi),\n    addPlugin: partial(addPlugin, config, accounts, backend, routeBroadcaster, middlewareManager),\n    removePlugin: partial(removePlugin, config, accounts, backend, routeBroadcaster, middlewareManager),\n    getPlugin: partial(getPlugin, accounts),\n    shutdown: partial(shutdown, accounts, routeBroadcaster)\n  }\n}\n"]}