{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AACvC,+CAAuC;AACvC,mDAA2C;AAC3C,qEAA4D;AAC5D,6DAAoD;AACpD,4DAA6D;AAC7D,8CAAgD;AAChD,uCAAsD;AACtD,MAAM,GAAG,GAAG,YAAY,CAAC,iBAAiB,CAAC,CAAA;AAE3C,MAAM,EAAE,kBAAkB,EAAE,GAAG,SAAS,CAAC,MAAM,CAAA;AAE/C;IAQE,YAAa,IAAqB;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAM,CAAC,CAAA;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAQ,CAAC,CAAA;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,2BAAgB,CAAC,CAAA;QAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAY,CAAC,CAAA;QAEtC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAoB,CAAC,CAAA;QACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,CAAA;IAC5C,CAAC;IAED,KAAK,CAAC,WAAW,CAAE,IAAY,EAAE,SAAiB,EAAE,QAA8D;QAChH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACtC,GAAG,CAAC,IAAI,CAAC,gDAAgD,EAAE,SAAS,CAAC,CAAA;YACrE,MAAM,IAAI,KAAK,CAAC,8CAA8C,GAAG,SAAS,CAAC,CAAA;QAC7E,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,IAAI,CAAC,yDAAyD,EAAE,OAAO,IAAI,EAAE,IAAI,CAAC,CAAA;YACtF,MAAM,IAAI,KAAK,CAAC,+CAA+C,GAAG,OAAO,IAAI,CAAC,CAAA;QAChF,CAAC;QAED,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,KAAK,SAAS,CAAC,IAAI,CAAC,gBAAgB;gBAClC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAA;YACtE,KAAK,SAAS,CAAC,IAAI,CAAC,2BAA2B,CAAC;YAChD,KAAK,SAAS,CAAC,IAAI,CAAC,2BAA2B,CAAC;YAChD,KAAK,SAAS,CAAC,IAAI,CAAC,gCAAgC;gBAClD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;YACtD;gBACE,GAAG,CAAC,IAAI,CAAC,iDAAiD,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC/E,MAAM,IAAI,kBAAkB,CAAC,qCAAqC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QACjF,CAAC;IACH,CAAC;CACF;AAzCD,uBAyCC","sourcesContent":["import * as IlpPacket from 'ilp-packet'\nimport Config from '../services/config'\nimport Accounts from '../services/accounts'\nimport RouteBroadcaster from '../services/route-broadcaster'\nimport RouteBuilder from '../services/route-builder'\nimport IlpPrepareController from '../controllers/ilp-prepare'\nimport IlqpController from '../controllers/ilqp'\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('core-middleware')\nimport reduct = require('reduct')\nconst { InvalidPacketError } = IlpPacket.Errors\n\nexport default class Core {\n  protected config: Config\n  protected accounts: Accounts\n  protected routeBroadcaster: RouteBroadcaster\n  protected routeBuilder: RouteBuilder\n  protected ilpPrepareController: IlpPrepareController\n  protected ilqpController: IlqpController\n\n  constructor (deps: reduct.Injector) {\n    this.config = deps(Config)\n    this.accounts = deps(Accounts)\n    this.routeBroadcaster = deps(RouteBroadcaster)\n    this.routeBuilder = deps(RouteBuilder)\n\n    this.ilpPrepareController = deps(IlpPrepareController)\n    this.ilqpController = deps(IlqpController)\n  }\n\n  async processData (data: Buffer, accountId: string, outbound: (data: Buffer, accountId: string) => Promise<Buffer>): Promise<Buffer> {\n    if (!this.accounts.getInfo(accountId)) {\n      log.warn('got data from unknown account id. accountId=%s', accountId)\n      throw new Error('got data from unknown account id. accountId=' + accountId)\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      log.warn('data handler was passed a non-buffer. typeof=%s data=%s', typeof data, data)\n      throw new Error('data handler was passed a non-buffer. typeof=' + typeof data)\n    }\n\n    switch (data[0]) {\n      case IlpPacket.Type.TYPE_ILP_PREPARE:\n        return this.ilpPrepareController.sendData(data, accountId, outbound)\n      case IlpPacket.Type.TYPE_ILQP_LIQUIDITY_REQUEST:\n      case IlpPacket.Type.TYPE_ILQP_BY_SOURCE_REQUEST:\n      case IlpPacket.Type.TYPE_ILQP_BY_DESTINATION_REQUEST:\n        return this.ilqpController.sendData(data, accountId)\n      default:\n        log.warn('received invalid packet type. source=%s type=%s', accountId, data[0])\n        throw new InvalidPacketError('invalid packet type received. type=' + data[0])\n    }\n  }\n}\n"]}