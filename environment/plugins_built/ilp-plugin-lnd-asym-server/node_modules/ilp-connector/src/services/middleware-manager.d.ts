/// <reference types="node" />
import reduct = require('reduct');
import Config from './config';
import Accounts from './accounts';
import Core from './core';
import Stats from './stats';
import { Middleware, MiddlewareDefinition } from '../types/middleware';
import { PluginInstance } from '../types/plugin';
export default class MiddlewareManager {
    protected config: Config;
    protected accounts: Accounts;
    protected core: Core;
    protected middlewares: {
        [key: string]: Middleware;
    };
    protected stats: Stats;
    private startupHandlers;
    private outgoingDataHandlers;
    private outgoingMoneyHandlers;
    constructor(deps: reduct.Injector);
    construct(name: string, definition: MiddlewareDefinition): Middleware;
    setup(): Promise<void>;
    startup(): Promise<void>;
    addPlugin(accountId: string, plugin: PluginInstance): Promise<void>;
    removePlugin(accountId: string, plugin: PluginInstance): void;
    sendData(data: Buffer, accountId: string): Promise<Buffer>;
    sendMoney(amount: string, accountId: string): Promise<void>;
    getMiddleware(name: string): Middleware | undefined;
    private createHandler<T, U>(pipeline, accountId, next);
}
