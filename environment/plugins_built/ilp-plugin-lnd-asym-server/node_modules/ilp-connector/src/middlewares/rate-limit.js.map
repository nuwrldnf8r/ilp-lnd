{"version":3,"file":"rate-limit.js","sourceRoot":"","sources":["rate-limit.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AACvC,uCAAsD;AACtD,MAAM,GAAG,GAAG,YAAY,CAAC,uBAAuB,CAAC,CAAA;AASjD,sDAA6C;AAC7C,MAAM,EAAE,gBAAgB,EAAE,GAAG,SAAS,CAAC,MAAM,CAAA;AAE7C,MAAM,qBAAqB,GAAG,EAAE,GAAG,IAAI,CAAA;AACvC,MAAM,oBAAoB,GAAG,KAAK,CAAA;AAElC;IAIE,YAAa,IAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAsB;QAC3D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAE,SAAoB,EAAE,SAAiB;QAC7D,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QAC3C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,6CAA6C,GAAG,SAAS,CAAC,CAAA;QAC5E,CAAC;QACD,MAAM,EACJ,YAAY,GAAG,qBAAqB,EACpC,WAAW,GAAG,oBAAoB,EAClC,QAAQ,GAAG,WAAW,EACvB,GAAG,WAAW,CAAC,SAAS,IAAI,EAAE,CAAA;QAE/B,GAAG,CAAC,KAAK,CAAC,2FAA2F,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAA;QAItJ,MAAM,MAAM,GAAG,IAAI,sBAAW,CAAC,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAA;QAEvE,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,KAAK,EAAE,IAAY,EAAE,IAAwC,EAAE,EAAE;gBACvE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,yBAAyB,GAAG,SAAS,CAAC,CAAA;oBACvD,MAAM,IAAI,gBAAgB,CAAC,gCAAgC,CAAC,CAAA;gBAC9D,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACnB,CAAC;SACF,CAAC,CAAA;QAEF,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC;YACjC,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,KAAK,EAAE,MAAc,EAAE,IAAsC,EAAE,EAAE;gBACvE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,0BAA0B,GAAG,SAAS,CAAC,CAAA;oBACxD,MAAM,IAAI,gBAAgB,CAAC,gCAAgC,CAAC,CAAA;gBAC9D,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACrB,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;CACF;AAlDD,sCAkDC","sourcesContent":["import * as IlpPacket from 'ilp-packet'\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('rate-limit-middleware')\nimport {\n  Middleware,\n  MiddlewareCallback,\n  MiddlewareServices,\n  MiddlewareStats,\n  Pipelines\n} from '../types/middleware'\nimport { AccountInfo } from '../types/accounts'\nimport TokenBucket from '../lib/token-bucket'\nconst { RateLimitedError } = IlpPacket.Errors\n\nconst DEFAULT_REFILL_PERIOD = 60 * 1000 // 1 minute\nconst DEFAULT_REFILL_COUNT = 10000\n\nexport default class RateLimitMiddleware implements Middleware {\n  private getInfo: (accountId: string) => AccountInfo\n  private stats: MiddlewareStats\n\n  constructor (opts: {}, { getInfo, stats }: MiddlewareServices) {\n    this.getInfo = getInfo\n    this.stats = stats\n  }\n\n  async applyToPipelines (pipelines: Pipelines, accountId: string) {\n    const accountInfo = this.getInfo(accountId)\n    if (!accountInfo) {\n      throw new Error('could not load info for account. accountId=' + accountId)\n    }\n    const {\n      refillPeriod = DEFAULT_REFILL_PERIOD,\n      refillCount = DEFAULT_REFILL_COUNT,\n      capacity = refillCount\n    } = accountInfo.rateLimit || {}\n\n    log.debug('created token bucket for account. accountId=%s refillPeriod=%s refillCount=%s capacity=%s', accountId, refillPeriod, refillCount, capacity)\n\n    // TODO: When we add the ability to update middleware, our state will get\n    //   reset every update, which may not be desired.\n    const bucket = new TokenBucket({ refillPeriod, refillCount, capacity })\n\n    pipelines.incomingData.insertLast({\n      name: 'rateLimit',\n      method: async (data: Buffer, next: MiddlewareCallback<Buffer, Buffer>) => {\n        if (!bucket.take()) {\n          this.stats.meter('rateLimit/incomingData/' + accountId)\n          throw new RateLimitedError('too many requests, throttling.')\n        }\n\n        return next(data)\n      }\n    })\n\n    pipelines.incomingMoney.insertLast({\n      name: 'rateLimit',\n      method: async (amount: string, next: MiddlewareCallback<string, void>) => {\n        if (!bucket.take()) {\n          this.stats.meter('rateLimit/incomingMoney/' + accountId)\n          throw new RateLimitedError('too many requests, throttling.')\n        }\n\n        return next(amount)\n      }\n    })\n  }\n}\n"]}