{"version":3,"file":"leveldown.js","sourceRoot":"","sources":["leveldown.ts"],"names":[],"mappings":";AAAA,+BAA8B;AAC9B,qCAA0C;AAC1C,yCAAiC;AAEjC,uCAAsD;AACtD,MAAM,GAAG,GAAG,YAAY,CAAC,iBAAiB,CAAC,CAAA;AAE3C;IAGE,YAAa,EAAE,EAAE,EAAE,IAAI,EAAiC;QACtD,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;YACZ,MAAM,CAAA;QACR,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,GAAG,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAA;YAC9D,IAAI,GAAG,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAA;QACvC,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,EAAE,GAAG,iBAAO,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,GAAG,CAAE,GAAW;QACpB,IAAI,CAAC;YACH,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QAClD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,CAAA;YACT,CAAC;QACH,CAAC;IACH,CAAC;IAED,KAAK,CAAC,GAAG,CAAE,GAAW,EAAE,KAAa;QACnC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAChC,CAAC;IAED,KAAK,CAAC,GAAG,CAAE,GAAW;QACpB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;CACF;AAED,iBAAS,cAAc,CAAA","sourcesContent":["import { resolve } from 'path'\nimport levelup, { LevelUp } from 'levelup'\nimport leveldown from 'leveldown'\nimport { StoreInstance } from '../types/store'\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('leveldown-store')\n\nclass LeveldownStore implements StoreInstance {\n  db: LevelUp\n\n  constructor ({ db, path }: {db?: LevelUp, path?: string}) {\n    if (db) {\n      this.db = db\n      return\n    }\n\n    if (!path) {\n      log.warn('no CONNECTOR_STORE_PATH set, defaulting to ./data.')\n      path = resolve(process.cwd(), 'data')\n    }\n\n    log.info('initialize database. path=%s', path)\n    this.db = levelup(leveldown(path))\n  }\n\n  async get (key: string) {\n    try {\n      return (await this.db.get(key)).toString('utf8')\n    } catch (e) {\n      if (e.name !== 'NotFoundError') {\n        throw e\n      }\n    }\n  }\n\n  async put (key: string, value: string) {\n    return this.db.put(key, value)\n  }\n\n  async del (key: string) {\n    return this.db.del(key)\n  }\n}\n\nexport = LeveldownStore\n"]}