{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash, randomBytes, createHmac } from 'crypto'\nimport { resolve } from 'path'\nimport { MiddlewareMethod } from '../types/middleware'\n\nexport const sha256 = (preimage: Buffer) => {\n  return createHash('sha256').update(preimage).digest()\n}\n\nexport function moduleExists (path: string) {\n  try {\n    require.resolve(path)\n    return true\n  } catch (err) {\n    return false\n  }\n}\n\nexport const loadModuleFromPathOrDirectly = (searchPath: string, module: string) => {\n  const localPath = resolve(searchPath, module)\n  if (moduleExists(localPath)) {\n    return localPath\n  } else if (moduleExists(module)) {\n    return module\n  } else {\n    return null\n  }\n}\n\nexport const loadModuleOfType = (type: string, name: string) => {\n  const module = loadModuleFromPathOrDirectly(resolve(__dirname, `../${type}s/`), name)\n\n  if (!module) {\n    throw new Error(`${type} not found as a module name or under /${type}s/. moduleName=${name}`)\n  }\n\n  const loadedModule = require(module)\n\n  if (loadedModule && typeof loadedModule === 'object' && typeof loadedModule.default === 'function') {\n    // support ES6 modules\n    return loadedModule.default\n  } else if (typeof loadedModule === 'function') {\n    return loadedModule\n  } else {\n    throw new TypeError(`${type} does not export a constructor. module=${module}`)\n  }\n}\n\nexport const extractDefaultsFromSchema = (schema: any, path = '') => {\n  if (typeof schema.default !== 'undefined') {\n    return schema.default\n  }\n\n  switch (schema.type) {\n    case 'object':\n      const result = {}\n      for (let key of Object.keys(schema.properties)) {\n        result[key] = extractDefaultsFromSchema(schema.properties[key], path + '.' + key)\n      }\n      return result\n    default:\n      throw new Error('No default found for schema path: ' + path)\n  }\n}\n\nexport function composeMiddleware<T, U> (\n  middleware: MiddlewareMethod<T, U>[]\n): MiddlewareMethod<T, U> {\n  return function (val: T, next: MiddlewareMethod<T, U>) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0, val)\n    async function dispatch (i: number, val: T): Promise<U> {\n      if (i <= index) {\n        throw new Error('next() called multiple times.')\n      }\n      index = i\n      const fn = (i === middleware.length) ? next : middleware[i]\n      return fn(val, function next (val: T) {\n        return dispatch(i + 1, val)\n      })\n    }\n  }\n}\n\nexport function uuid () {\n  const random = randomBytes(16)\n  random[6] = (random[6] & 0x0f) | 0x40\n  random[8] = (random[8] & 0x3f) | 0x80\n  return random.toString('hex')\n    .replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/, '$1-$2-$3-$4-$5')\n}\n\nexport function hmac (secret: Buffer, message: string | Buffer) {\n  const hmac = createHmac('sha256', secret)\n  hmac.update(message, 'utf8')\n  return hmac.digest()\n}\n"]}