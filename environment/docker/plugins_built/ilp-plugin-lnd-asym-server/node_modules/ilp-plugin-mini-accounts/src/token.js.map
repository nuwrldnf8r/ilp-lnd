{"version":3,"file":"token.js","sourceRoot":"","sources":["token.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAAgC;AAChC,iCAAgC;AAEhC,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;AAEvC,MAAM,KAAK,GAAG,CAAC,OAAe,EAAU,EAAE,CAAC,OAAO,GAAG,eAAe,CAAA;AACpE,MAAM,gBAAgB,GAAG,CAAC,OAAe,EAAU,EAAE,CAAC,OAAO,GAAG,QAAQ,CAAA;AAExE,gBAAiB,KAAa;IAC5B,OAAO,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,CAAA;AAChF,CAAC;AAED;IAKE,YAAa,IAKZ;QACC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAA;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAA;QACxB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAA;SACrC;aAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACrB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACvC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAA;SAC5E;IACH,CAAC;IAED,KAAK,CAAE,UAAiB;QACtB,MAAM,CAAC,UAAU,EAAE,kCAAkC,CAAC,CAAA;QACtD,OAAO,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ;YACpC,IAAI,CAAC,YAAY,KAAK,UAAU,CAAC,YAAY,CAAA;IACvD,CAAC;IAED,MAAM;QACJ,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;IACjE,CAAC;IAED,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IAC1D,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;IAC1C,CAAC;IAED,MAAM,CAAO,IAAI,CAAE,EAAE,OAAO,EAAE,KAAK,EAGlC;;YACC,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAChC,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAC7C,IAAI,WAAW,EAAE;gBACf,OAAO,IAAI,KAAK,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAA;aAClD;YAED,MAAM,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAA;YAC3C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAA;YAClD,IAAI,KAAK,EAAE;gBACT,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;gBACxC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAA;gBACvC,OAAO,IAAI,KAAK,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;aAC5C;YAED,OAAO,IAAI,CAAA;QACb,CAAC;KAAA;CACF;AA5DD,wBA4DC","sourcesContent":["import * as assert from 'assert'\nimport * as crypto from 'crypto'\nimport { StoreWrapper } from './types'\nconst BtpPacket = require('btp-packet')\n\nconst TOKEN = (account: string): string => account + ':hashed-token'\nconst DEPRECATED_TOKEN = (account: string): string => account + ':token'\n\nfunction sha256 (token: string): string {\n  return BtpPacket.base64url(crypto.createHash('sha256').update(token).digest())\n}\n\nexport default class Token {\n  private _account: string\n  private _hashedToken: string\n  private _store: StoreWrapper\n\n  constructor (opts: {\n    account: string,\n    store: StoreWrapper,\n    token?: string,\n    hashedToken?: string\n  }) {\n    this._account = opts.account\n    this._store = opts.store\n    if (opts.hashedToken) {\n      this._hashedToken = opts.hashedToken\n    } else if (opts.token) {\n      this._hashedToken = sha256(opts.token)\n    } else {\n      throw new Error('Token: missing parameter: opts.hashedToken or opts.token')\n    }\n  }\n\n  equal (otherToken: Token): boolean {\n    assert(otherToken, 'parameter otherToken is required')\n    return this._account === otherToken._account &&\n            this._hashedToken === otherToken._hashedToken\n  }\n\n  exists (): boolean {\n    return !!(this._store && this._store.get(TOKEN(this._account)))\n  }\n\n  save () {\n    this._store.set(TOKEN(this._account), this._hashedToken)\n  }\n\n  delete () {\n    this._store.delete(TOKEN(this._account))\n  }\n\n  static async load ({ account, store }: {\n    account: string,\n    store: StoreWrapper\n  }): Promise<Token | null> {\n    await store.load(TOKEN(account))\n    const hashedToken = store.get(TOKEN(account))\n    if (hashedToken) {\n      return new Token({ account, store, hashedToken })\n    }\n\n    await store.load(DEPRECATED_TOKEN(account))\n    const token = store.get(DEPRECATED_TOKEN(account))\n    if (token) {\n      store.set(TOKEN(account), sha256(token))\n      store.delete(DEPRECATED_TOKEN(account))\n      return new Token({ account, store, token })\n    }\n\n    return null\n  }\n}\n"]}