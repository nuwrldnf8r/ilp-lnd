/// <reference types="node" />
import Accounts from './accounts';
import RoutingTable from './routing-table';
import RateBackend from './rate-backend';
import Quoter from './quoter';
import Config from './config';
import reduct = require('reduct');
import * as IlpPacket from 'ilp-packet';
export interface QuoteLiquidityParams extends IlpPacket.IlqpLiquidityRequest {
    sourceAccount: string;
}
export interface QuoteBySourceParams extends IlpPacket.IlqpBySourceRequest {
    sourceAccount: string;
}
export interface QuoteByDestinationParams extends IlpPacket.IlqpByDestinationRequest {
    sourceAccount: string;
}
export default class RouteBuilder {
    protected accounts: Accounts;
    protected routingTable: RoutingTable;
    protected backend: RateBackend;
    protected quoter: Quoter;
    protected config: Config;
    protected isTrivialRate: boolean;
    constructor(deps: reduct.Injector);
    getNextHop(sourceAccount: string, destinationAccount: string): string;
    quoteLocal(sourceAccount: string, destinationAccount: string): Promise<{
        nextHop: string;
        rate: number;
    }>;
    quoteLiquidity(sourceAccount: string, packet: IlpPacket.IlqpLiquidityRequest): Promise<{
        liquidityCurve: any;
        appliesToPrefix: string;
        sourceHoldDuration: any;
        expiresAt: Date;
    }>;
    _getScaleAdjustment(sourceAccount: string, destinationAccount: string): 0 | 1;
    quoteBySource(sourceAccount: string, packet: IlpPacket.IlqpBySourceRequest): Promise<{
        destinationAmount: any;
        sourceHoldDuration: any;
    }>;
    quoteByDestination(sourceAccount: string, packet: IlpPacket.IlqpByDestinationRequest): Promise<{
        sourceAmount: string;
        sourceHoldDuration: any;
    }>;
    getNextHopPacket(sourceAccount: string, sourcePacket: IlpPacket.IlpPrepare): Promise<{
        nextHop: string;
        nextHopPacket: {
            amount: string;
            expiresAt: Date;
            executionCondition: Buffer;
            destination: string;
            data: Buffer;
        };
    }>;
    _validateHoldDurations(sourceHoldDuration: number, destinationHoldDuration: number): void;
    _getDestinationExpiry(sourceExpiry: Date): Date;
    _verifyPluginIsConnected(account: string): void;
}
