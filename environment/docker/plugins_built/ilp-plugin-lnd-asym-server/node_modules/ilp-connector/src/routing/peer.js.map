{"version":3,"file":"peer.js","sourceRoot":"","sources":["peer.ts"],"names":[],"mappings":";;AAAA,mDAA2C;AAC3C,+CAAuC;AACvC,mFAAyE;AAIzE,6CAAoC;AACpC,iDAAwC;AAoBxC;IAOE,YAAa,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAY;QAqC7D,uBAAkB,GAAG,CAAC,SAAiB,EAAY,EAAE;YAC3D,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAA;QACxE,CAAC,CAAA;QAtCC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAM,CAAC,CAAA;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAQ,CAAC,CAAA;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;QACjD,MAAM,sBAAsB,GAAG,IAAI,CAAC,kCAAsB,CAAC,CAAA;QAE3D,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,SAAS,GAAG,IAAI,oBAAS,CAAC;gBAC7B,SAAS;gBACT,MAAM;gBACN,sBAAsB;gBACtB,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;gBAClD,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;gBAC3C,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;gBACpC,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;aAC3D,CAAC,CAAA;QACJ,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,WAAW,GAAG,IAAI,sBAAW,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAA;QAC3D,CAAC;IACH,CAAC;IAED,YAAY;QACV,MAAM,CAAC,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAED,WAAW;QACT,MAAM,CAAC,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED,SAAS;QACP,MAAM,CAAC,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;CAKF;AA/CD,uBA+CC","sourcesContent":["import Accounts from '../services/accounts'\nimport Config from '../services/config'\nimport ForwardingRoutingTable from '../services/forwarding-routing-table'\nimport { BroadcastRoute } from '../types/routing'\nimport reduct = require('reduct')\nimport { Relation } from './relation'\nimport CcpSender from './ccp-sender'\nimport CcpReceiver from './ccp-receiver'\n\nexport interface BroadcastRoutesParams {\n  accounts: Accounts,\n  newRoutes: BroadcastRoute[],\n  routingTableId: string,\n  holdDownTime: number,\n  withdrawnRoutes: { prefix: string, epoch: number }[],\n  fromEpoch: number,\n  toEpoch: number,\n  timeout: number\n}\n\nexport interface PeerOpts {\n  deps: reduct.Injector,\n  accountId: string,\n  sendRoutes: boolean,\n  receiveRoutes: boolean\n}\n\nexport default class Peer {\n  private config: Config\n  private accounts: Accounts\n  private accountId: string\n  private ccpSender?: CcpSender\n  private ccpReceiver?: CcpReceiver\n\n  constructor ({ deps, accountId, sendRoutes, receiveRoutes }: PeerOpts) {\n    this.config = deps(Config)\n    this.accounts = deps(Accounts)\n    this.accountId = accountId\n\n    const plugin = this.accounts.getPlugin(accountId)\n    const forwardingRoutingTable = deps(ForwardingRoutingTable)\n\n    if (sendRoutes) {\n      this.ccpSender = new CcpSender({\n        accountId,\n        plugin,\n        forwardingRoutingTable,\n        getOwnAddress: () => this.accounts.getOwnAddress(),\n        getAccountRelation: this.getAccountRelation,\n        routeExpiry: this.config.routeExpiry,\n        routeBroadcastInterval: this.config.routeBroadcastInterval\n      })\n    }\n\n    if (receiveRoutes) {\n      this.ccpReceiver = new CcpReceiver({ accountId, plugin })\n    }\n  }\n\n  getAccountId () {\n    return this.accountId\n  }\n\n  getReceiver () {\n    return this.ccpReceiver\n  }\n\n  getSender () {\n    return this.ccpSender\n  }\n\n  private getAccountRelation = (accountId: string): Relation => {\n    return accountId ? this.accounts.getInfo(accountId).relation : 'local'\n  }\n}\n"]}