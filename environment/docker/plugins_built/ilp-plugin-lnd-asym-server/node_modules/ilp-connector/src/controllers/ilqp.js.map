{"version":3,"file":"ilqp.js","sourceRoot":"","sources":["ilqp.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AACvC,6DAAoD;AACpD,uCAAsD;AACtD,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAA;AAEhC,MAAM,EAAE,kBAAkB,EAAE,GAAG,SAAS,CAAC,MAAM,CAAA;AAE/C;IAGE,YAAa,IAAqB;QAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAY,CAAC,CAAA;IACxC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAE,MAAc,EAAE,aAAqB;QACnD,GAAG,CAAC,KAAK,CAAC,+CAA+C,GAAG,aAAa,CAAC,CAAA;QAE1E,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,KAAK,SAAS,CAAC,IAAI,CAAC,2BAA2B;gBAC7C,MAAM,CAAC,SAAS,CAAC,8BAA8B,CAC7C,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CACpC,aAAa,EACb,SAAS,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAClD,CACF,CAAA;YACH,KAAK,SAAS,CAAC,IAAI,CAAC,2BAA2B;gBAC7C,MAAM,CAAC,SAAS,CAAC,6BAA6B,CAC5C,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CACnC,aAAa,EACb,SAAS,CAAC,8BAA8B,CAAC,MAAM,CAAC,CACjD,CACF,CAAA;YACH,KAAK,SAAS,CAAC,IAAI,CAAC,gCAAgC;gBAClD,MAAM,CAAC,SAAS,CAAC,kCAAkC,CACjD,MAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,CACxC,aAAa,EACb,SAAS,CAAC,mCAAmC,CAAC,MAAM,CAAC,CACtD,CACF,CAAA;YACH;gBACE,MAAM,IAAI,kBAAkB,CAAC,6BAA6B,CAAC,CAAA;QAC/D,CAAC;IACH,CAAC;CACF;AApCD,iCAoCC","sourcesContent":["import * as IlpPacket from 'ilp-packet'\nimport RouteBuilder from '../services/route-builder'\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('ilqp')\nimport reduct = require('reduct')\nconst { InvalidPacketError } = IlpPacket.Errors\n\nexport default class IlqpController {\n  protected routeBuilder: RouteBuilder\n\n  constructor (deps: reduct.Injector) {\n    this.routeBuilder = deps(RouteBuilder)\n  }\n\n  async sendData (packet: Buffer, sourceAccount: string) {\n    log.debug('responding to ILQP quote request. clientName=' + sourceAccount)\n\n    switch (packet[0]) {\n      case IlpPacket.Type.TYPE_ILQP_LIQUIDITY_REQUEST:\n        return IlpPacket.serializeIlqpLiquidityResponse(\n          await this.routeBuilder.quoteLiquidity(\n            sourceAccount,\n            IlpPacket.deserializeIlqpLiquidityRequest(packet)\n          )\n        )\n      case IlpPacket.Type.TYPE_ILQP_BY_SOURCE_REQUEST:\n        return IlpPacket.serializeIlqpBySourceResponse(\n          await this.routeBuilder.quoteBySource(\n            sourceAccount,\n            IlpPacket.deserializeIlqpBySourceRequest(packet)\n          )\n        )\n      case IlpPacket.Type.TYPE_ILQP_BY_DESTINATION_REQUEST:\n        return IlpPacket.serializeIlqpByDestinationResponse(\n          await this.routeBuilder.quoteByDestination(\n            sourceAccount,\n            IlpPacket.deserializeIlqpByDestinationRequest(packet)\n          )\n        )\n      default:\n        throw new InvalidPacketError('packet has unexpected type.')\n    }\n  }\n}\n"]}