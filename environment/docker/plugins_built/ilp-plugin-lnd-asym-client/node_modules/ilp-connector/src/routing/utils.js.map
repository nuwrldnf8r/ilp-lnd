{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":";;AAGA,mCAAkC;AAElC,2BAAmC,KAAY;IAC7C,MAAM,mBACD,KAAK,IACR,IAAI,EAAE,SAAS,EACf,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAC3B;AACH,CAAC;AAND,8CAMC;AAED,kCAA0C,YAA8B;IACtE,MAAM,CAAC,kBAAS,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,iBAAiB,CAAC,CAAA;AAC5D,CAAC;AAFD,4DAEC;AAED,4CAAoD,YAAoC;IACtF,MAAM,CAAC,kBAAS,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,WAAwB,EAAE,EAAE,CAAC,CACpE,WAAW,CAAC,KAAK;QACjB,CAAC,CAAC,iBAAiB,CAAC,WAAW,CAAC,KAAK,CAAC;QACtC,CAAC,CAAC,IAAI,CACP,CAAC,CAAA;AACJ,CAAC;AAND,gFAMC","sourcesContent":["import { Route } from '../types/routing'\nimport ForwardingRoutingTable, { RouteUpdate } from '../services/forwarding-routing-table'\nimport PrefixMap from './prefix-map'\nimport { mapValues } from 'lodash'\n\nexport function formatRouteAsJson (route: Route) {\n  return {\n    ...route,\n    auth: undefined,\n    path: route.path.join(' ')\n  }\n}\n\nexport function formatRoutingTableAsJson (routingTable: PrefixMap<Route>) {\n  return mapValues(routingTable.toJSON(), formatRouteAsJson)\n}\n\nexport function formatForwardingRoutingTableAsJson (routingTable: ForwardingRoutingTable) {\n  return mapValues(routingTable.toJSON(), (routeUpdate: RouteUpdate) => (\n    routeUpdate.route\n    ? formatRouteAsJson(routeUpdate.route)\n    : null\n  ))\n}\n"]}