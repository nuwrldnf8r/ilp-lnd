import Accounts from '../services/accounts';
import { BroadcastRoute, IncomingRoute } from '../types/routing';
import { CcpRouteUpdateRequest } from 'ilp-protocol-ccp';
import { PluginInstance } from '../types/plugin';
export interface BroadcastRoutesParams {
    accounts: Accounts;
    newRoutes: BroadcastRoute[];
    routingTableId: string;
    holdDownTime: number;
    withdrawnRoutes: {
        prefix: string;
        epoch: number;
    }[];
    fromEpoch: number;
    toEpoch: number;
    timeout: number;
}
export interface CcpReceiverOpts {
    plugin: PluginInstance;
    accountId: string;
}
export default class CcpReceiver {
    private plugin;
    private log;
    private accountId;
    private routes;
    private expiry;
    private routingTableId;
    private epoch;
    constructor({plugin, accountId}: CcpReceiverOpts);
    bump(holdDownTime: number): void;
    getAccountId(): string;
    getExpiry(): number;
    getPrefixes(): string[];
    getRoutingTableId(): string;
    getEpoch(): number;
    getStatus(): {
        routingTableId: string;
        epoch: number;
    };
    handleRouteUpdate({speaker, routingTableId, fromEpochIndex, toEpochIndex, holdDownTime, newRoutes, withdrawnRoutes}: CcpRouteUpdateRequest): string[];
    getPrefix(prefix: string): IncomingRoute | undefined;
    sendRouteControl: () => void;
    private addRoute(route);
    private deleteRoute(prefix);
}
