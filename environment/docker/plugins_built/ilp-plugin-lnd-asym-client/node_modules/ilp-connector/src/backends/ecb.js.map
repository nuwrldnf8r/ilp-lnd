{"version":3,"file":"ecb.js","sourceRoot":"","sources":["ecb.ts"],"names":[],"mappings":"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","sourcesContent":["import fetchUri from 'node-fetch'\nimport * as sax from 'sax'\nimport BigNumber from 'bignumber.js'\nimport { AccountInfo } from '../types/accounts'\nimport { BackendInstance, BackendServices } from '../types/backend'\n\nimport { create as createLogger } from '../common/log'\nconst log = createLogger('ecb')\n\nconst RATES_API = 'https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml'\n\nexport interface ECBBackendOptions {\n  spread: number,\n  ratesApiUrl: string,\n  mockData: object\n}\n\n/**\n * Dummy backend that uses the ECB API for FX rates\n */\nexport default class ECBBackend implements BackendInstance {\n  protected spread: number\n  protected ratesApiUrl: string\n  protected getInfo: (accountId: string) => AccountInfo | undefined\n\n  protected rates: {\n    [key: string]: number\n  }\n  protected currencies: string[]\n  private mockData: object\n\n  /**\n   * Constructor.\n   *\n   * @param opts.spread The spread we will use to mark up the FX rates\n   * @param opts.ratesApiUrl The URL for querying the ECB API\n   * @param api.getInfo Method which maps account IDs to AccountInfo objects\n   * @param api.getAssetCode Method which maps account IDs to asset code\n   */\n  constructor (opts: ECBBackendOptions, api: BackendServices) {\n    this.spread = opts.spread || 0\n    this.ratesApiUrl = opts.ratesApiUrl || RATES_API\n    this.mockData = opts.mockData\n    this.getInfo = api.getInfo\n    // this.ratesCacheTtl = opts.ratesCacheTtl || 24 * 3600000\n\n    this.rates = {}\n    this.currencies = []\n  }\n\n  /**\n   * Get the rates from the API\n   *\n   * Mock data can be provided for testing purposes\n   */\n  async connect () {\n    let apiData\n    if (this.mockData) {\n      log.debug('connect using mock data.')\n      apiData = this.mockData\n    } else {\n      log.debug('connect. uri=' + this.ratesApiUrl)\n      let result = await fetchUri(this.ratesApiUrl)\n      apiData = await parseXMLResponse(await result.text())\n    }\n    this.rates = apiData.rates\n    this.rates[apiData.base] = 1\n    this.currencies = Object.keys(this.rates)\n    this.currencies.sort()\n    log.debug('data loaded. noCurrencies=' + this.currencies.length)\n  }\n\n  _formatAmount (amount: string) {\n    return new BigNumber(amount).toFixed(2)\n  }\n\n  _formatAmountCeil (amount: string) {\n    return new BigNumber(amount).decimalPlaces(2, BigNumber.ROUND_CEIL).toFixed(2)\n  }\n\n  /**\n   * Get a rate for the given parameters.\n   *\n   * @param sourceAccount The account ID of the source account\n   * @param destinationAccount The account ID of the next hop account\n   * @returns Exchange rate with spread applied\n   */\n  async getRate (sourceAccount: string, destinationAccount: string) {\n    const sourceInfo = this.getInfo(sourceAccount)\n    const destinationInfo = this.getInfo(destinationAccount)\n\n    if (!sourceInfo) {\n      log.warn('unable to fetch account info for source account. accountId=%s', sourceAccount)\n      throw new Error('unable to fetch account info for source account. accountId=' + sourceAccount)\n    }\n    if (!destinationInfo) {\n      log.warn('unable to fetch account info for destination account. accountId=%s', destinationAccount)\n      throw new Error('unable to fetch account info for destination account. accountId=' + destinationAccount)\n    }\n\n    const sourceCurrency = sourceInfo.assetCode\n    const destinationCurrency = destinationInfo.assetCode\n\n    // Get ratio between currencies and apply spread\n    const sourceRate = this.rates[sourceCurrency]\n    const destinationRate = this.rates[destinationCurrency]\n\n    if (!sourceRate) {\n      log.warn('no rate available for source currency. currency=%s', sourceCurrency)\n      throw new Error('no rate available. currency=' + sourceCurrency)\n    }\n\n    if (!destinationRate) {\n      log.warn('no rate available for destination currency. currency=%s', destinationCurrency)\n      throw new Error('no rate available. currency=' + destinationCurrency)\n    }\n\n    // The spread is subtracted from the rate when going in either direction,\n    // so that the DestinationAmount always ends up being slightly less than\n    // the (equivalent) SourceAmount -- regardless of which of the 2 is fixed:\n    //\n    //   SourceAmount * Rate * (1 - Spread) = DestinationAmount\n    //\n    const rate = new BigNumber(destinationRate).shiftedBy(destinationInfo.assetScale)\n      .div(new BigNumber(sourceRate).shiftedBy(sourceInfo.assetScale))\n      .times(new BigNumber(1).minus(this.spread))\n      .toPrecision(15)\n\n    log.debug('quoted rate. from=%s to=%s fromCur=%s toCur=%s rate=%s spread=%s', sourceAccount, destinationAccount, sourceCurrency, destinationCurrency, rate, this.spread)\n\n    return Number(rate)\n  }\n\n  /**\n   * This method is called to allow statistics to be collected by the backend.\n   *\n   * The ECB backend does not support this functionality.\n   */\n  async submitPayment () {\n    return Promise.resolve(undefined)\n  }\n}\n\nfunction parseXMLResponse (data: string) {\n  const parser = sax.parser(true)\n  const apiData = { base: 'EUR', date: null, rates: {} }\n  parser.onopentag = (node) => {\n    if (node.name === 'Cube' && node.attributes.time) {\n      apiData.date = node.attributes.time\n    }\n    if (node.name === 'Cube' && node.attributes.currency) {\n      apiData.rates[node.attributes.currency] = node.attributes.rate\n    }\n  }\n  return new Promise((resolve, reject) => {\n    parser.onerror = reject\n    parser.onend = () => resolve(apiData)\n    parser.write(data).close()\n  })\n}\n"]}