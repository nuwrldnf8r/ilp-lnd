{"version":3,"file":"balance.js","sourceRoot":"","sources":["balance.ts"],"names":[],"mappings":"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","sourcesContent":["import { create as createLogger } from '../common/log'\nconst log = createLogger('balance-middleware')\nimport { Middleware, MiddlewareCallback, MiddlewareServices, Pipelines } from '../types/middleware'\nimport { AccountInfo } from '../types/accounts'\nimport BigNumber from 'bignumber.js'\nimport * as IlpPacket from 'ilp-packet'\nconst { InsufficientLiquidityError } = IlpPacket.Errors\n\ninterface BalanceOpts {\n  initialBalance?: BigNumber\n  minimum?: BigNumber\n  maximum?: BigNumber\n}\n\nclass Balance {\n  private balance: BigNumber\n  private minimum: BigNumber\n  private maximum: BigNumber\n\n  constructor ({\n    initialBalance = new BigNumber(0),\n    minimum = new BigNumber(0),\n    maximum = new BigNumber(Infinity)\n  }: BalanceOpts) {\n    this.balance = initialBalance\n    this.minimum = minimum\n    this.maximum = maximum\n  }\n\n  add (amount: BigNumber | string | number) {\n    const newBalance = this.balance.plus(amount)\n\n    if (newBalance.gt(this.maximum)) {\n      log.info('rejected balance update. oldBalance=%s newBalance=%s amount=%s', this.balance, newBalance, amount)\n      throw new InsufficientLiquidityError('exceeded maximum balance.')\n    }\n\n    this.balance = newBalance\n  }\n\n  subtract (amount: BigNumber | string | number) {\n    const newBalance = this.balance.minus(amount)\n\n    if (newBalance.lt(this.minimum)) {\n      log.info('rejected balance update. oldBalance=%s newBalance=%s amount=%s', this.balance, newBalance, amount)\n      throw new Error(`insufficient funds. oldBalance=${this.balance} proposedBalance=${newBalance}`)\n    }\n\n    this.balance = newBalance\n  }\n\n  getValue () {\n    return this.balance\n  }\n\n  toJSON () {\n    return {\n      balance: this.balance.toString(),\n      minimum: this.minimum.toString(),\n      maximum: this.maximum.toString()\n    }\n  }\n}\n\nexport default class BalanceMiddleware implements Middleware {\n  private getInfo: (accountId: string) => AccountInfo\n  private sendMoney: (amount: string, accountId: string) => Promise<void>\n  private balances: Map<string, Balance> = new Map()\n\n  constructor (opts: {}, { getInfo, sendMoney }: MiddlewareServices) {\n    this.getInfo = getInfo\n    this.sendMoney = sendMoney\n  }\n\n  async applyToPipelines (pipelines: Pipelines, accountId: string) {\n    const accountInfo = this.getInfo(accountId)\n    if (!accountInfo) {\n      throw new Error('could not load info for account. accountId=' + accountId)\n    }\n\n    if (accountInfo.balance) {\n      const {\n        minimum = '-Infinity',\n        maximum\n      } = accountInfo.balance\n\n      let balance = new Balance({\n        minimum: new BigNumber(minimum),\n        maximum: new BigNumber(maximum)\n      })\n      this.balances.set(accountId, balance)\n\n      log.debug('initializing balance for account. accountId=%s minimumBalance=%s maximumBalance=%s', accountId, minimum, maximum)\n\n      pipelines.startup.insertLast({\n        name: 'balance',\n        method: async (dummy: void, next: MiddlewareCallback<void, void>) => {\n          // When starting up, check if we need to pre-fund / settle\n          // tslint:disable-next-line:no-floating-promises\n          this.maybeSettle(accountId)\n\n          return next(dummy)\n        }\n      })\n\n      pipelines.incomingData.insertLast({\n        name: 'balance',\n        method: async (data: Buffer, next: MiddlewareCallback<Buffer, Buffer>) => {\n          if (data[0] === IlpPacket.Type.TYPE_ILP_PREPARE) {\n            const parsedPacket = IlpPacket.deserializeIlpPrepare(data)\n\n            // Ignore zero amount packets\n            if (parsedPacket.amount === '0') {\n              return next(data)\n            }\n\n            // Increase balance on prepare\n            balance.add(parsedPacket.amount)\n            log.debug('balance increased due to incoming ilp prepare. accountId=%s amount=%s newBalance=%s', accountId, parsedPacket.amount, balance.getValue())\n\n            let result\n            try {\n              result = await next(data)\n            } catch (err) {\n              // Refund on error\n              balance.subtract(parsedPacket.amount)\n              log.debug('incoming packet refunded due to error. accountId=%s amount=%s newBalance=%s', accountId, parsedPacket.amount, balance.getValue())\n              throw err\n            }\n\n            if (result[0] === IlpPacket.Type.TYPE_ILP_REJECT) {\n              // Refund on reject\n              balance.subtract(parsedPacket.amount)\n              log.debug('incoming packet refunded due to ilp reject. accountId=%s amount=%s newBalance=%s', accountId, parsedPacket.amount, balance.getValue())\n            }\n\n            return result\n          } else {\n            return next(data)\n          }\n        }\n      })\n\n      pipelines.incomingMoney.insertLast({\n        name: 'balance',\n        method: async (amount: string, next: MiddlewareCallback<string, void>) => {\n          balance.subtract(amount)\n          log.debug('balance reduced due to incoming settlement. accountId=%s amount=%s newBalance=%s', accountId, amount, balance.getValue())\n\n          return next(amount)\n        }\n      })\n\n      pipelines.outgoingData.insertLast({\n        name: 'balance',\n        method: async (data: Buffer, next: MiddlewareCallback<Buffer, Buffer>) => {\n          if (data[0] === IlpPacket.Type.TYPE_ILP_PREPARE) {\n            const parsedPacket = IlpPacket.deserializeIlpPrepare(data)\n\n            // Ignore zero amount packets\n            if (parsedPacket.amount === '0') {\n              return next(data)\n            }\n\n            let result\n            try {\n              result = await next(data)\n            } catch (err) {\n              // Do not apply any changes on an error\n              log.debug('outgoing packet not applied due to error. accountId=%s amount=%s balance=%s', accountId, parsedPacket.amount, balance.getValue())\n              throw err\n            }\n\n            if (result[0] === IlpPacket.Type.TYPE_ILP_REJECT) {\n              // Do not apply any changes on reject\n              log.debug('outgoing packet not applied due to ilp reject. accountId=%s amount=%s balance=%s', accountId, parsedPacket.amount, balance.getValue())\n            } else if (result[0] === IlpPacket.Type.TYPE_ILP_FULFILL) {\n              // Decrease balance on prepare\n              balance.subtract(parsedPacket.amount)\n              log.debug('balance decreased due to outgoing ilp packet being fulfilled. accountId=%s amount=%s newBalance=%s', accountId, parsedPacket.amount, balance.getValue())\n\n              // tslint:disable-next-line:no-floating-promises\n              this.maybeSettle(accountId)\n            }\n\n            return result\n          } else {\n            return next(data)\n          }\n        }\n      })\n\n      pipelines.outgoingMoney.insertLast({\n        name: 'balance',\n        method: async (amount: string, next: MiddlewareCallback<string, void>) => {\n          balance.add(amount)\n          log.debug('balance increased due to outgoing settlement. accountId=%s amount=%s newBalance=%s', accountId, amount, balance.getValue())\n\n          return next(amount)\n        }\n      })\n    } else {\n      log.warn('(!!!) balance middleware NOT enabled for account, this account can spend UNLIMITED funds. accountId=%s', accountId)\n    }\n  }\n\n  getStatus () {\n    const accounts = {}\n    this.balances.forEach((balance, accountId) => {\n      accounts[accountId] = balance.toJSON()\n    })\n    return { accounts }\n  }\n\n  modifyBalance (accountId: string, _amountDiff: BigNumber.Value): BigNumber {\n    const amountDiff = new BigNumber(_amountDiff)\n    const balance = this.getBalance(accountId)\n    log.warn('modifying balance accountId=%s amount=%s', accountId, amountDiff.toString())\n    if (amountDiff.isPositive()) {\n      balance.add(amountDiff)\n    } else {\n      balance.subtract(amountDiff.negated())\n      // tslint:disable-next-line:no-floating-promises\n      this.maybeSettle(accountId)\n    }\n    return balance.getValue()\n  }\n\n  private getBalance (accountId: string): Balance {\n    const balance = this.balances.get(accountId)\n    if (!balance) {\n      throw new Error('account not found. accountId=' + accountId)\n    }\n    return balance\n  }\n\n  private async maybeSettle (accountId: string): Promise<void> {\n    const accountInfo = this.getInfo(accountId)\n    const { settleThreshold, settleTo = '0' } = accountInfo.balance!\n    const bnSettleThreshold = settleThreshold ? new BigNumber(settleThreshold) : undefined\n    const bnSettleTo = new BigNumber(settleTo)\n    const balance = this.getBalance(accountId)\n\n    const settle = bnSettleThreshold && bnSettleThreshold.gt(balance.getValue())\n    if (!settle) return\n\n    const settleAmount = bnSettleTo.minus(balance.getValue())\n    log.debug('settlement triggered. accountId=%s balance=%s settleAmount=%s', accountId, balance.getValue(), settleAmount)\n\n    await this.sendMoney(settleAmount.toString(), accountId)\n      .catch(e => {\n        let err = e\n        if (!err || typeof err !== 'object') {\n          err = new Error('Non-object thrown: ' + e)\n        }\n        log.error('error occurred during settlement. accountId=%s settleAmount=%s errInfo=%s', accountId, settleAmount, err.stack ? err.stack : err)\n      })\n  }\n}\n"]}